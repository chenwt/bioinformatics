<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.0 20120229//EN" "JATS-archivearticle1.dtd"> 
<article xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:mml="http://www.w3.org/1998/Math/MathML" article-type="research-article"><?DTDIdentifier.IdentifierValue -//ES//DTD journal article DTD version 5.2.0//EN//XML?><?DTDIdentifier.IdentifierType public?><?SourceDTD.DTDName art520.dtd?><?SourceDTD.Version 5.2.0?><?ConverterInfo.XSLTName elsevier2nlmx2.xsl?><?ConverterInfo.Version 2?><?origin publisher?><?FILEmeta_YMETH3185 xml ?><?FILEmain xml ?><?FILEgr1 jpg ?><?FILEgr2 jpg ?><?FILEgr3 jpg ?><?FILEgr4 jpg ?><?FILEgr5 jpg ?><?FILEfx1 jpg ?><?FILEsi1 gif ?><front><journal-meta><journal-id journal-id-type="nlm-ta">Methods</journal-id><journal-id journal-id-type="iso-abbrev">Methods</journal-id><journal-title-group><journal-title>Methods (San Diego, Calif.)</journal-title></journal-title-group><issn pub-type="ppub">1046-2023</issn><issn pub-type="epub">1095-9130</issn><publisher><publisher-name>Academic Press</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="pmcid">3991327</article-id><article-id pub-id-type="publisher-id">S1046-2023(13)00239-9</article-id><article-id pub-id-type="doi">10.1016/j.ymeth.2013.06.027</article-id><article-categories><subj-group subj-group-type="heading"><subject>Article</subject></subj-group></article-categories><title-group><article-title>Kraken: A set of tools for quality control and analysis of high-throughput sequence data<sup><xref ref-type="fn" rid="d32e403">&#x02606;</xref></sup></article-title></title-group><contrib-group><contrib contrib-type="author"><name><surname>Davis</surname><given-names>Matthew P.A.</given-names></name><xref rid="af005" ref-type="aff">a</xref><xref rid="fn1" ref-type="fn">1</xref></contrib><contrib contrib-type="author"><name><surname>van Dongen</surname><given-names>Stijn</given-names></name><xref rid="af005" ref-type="aff">a</xref><xref rid="fn1" ref-type="fn">1</xref></contrib><contrib contrib-type="author"><name><surname>Abreu-Goodger</surname><given-names>Cei</given-names></name><xref rid="af010" ref-type="aff">b</xref></contrib><contrib contrib-type="author"><name><surname>Bartonicek</surname><given-names>Nenad</given-names></name><xref rid="af005" ref-type="aff">a</xref></contrib><contrib contrib-type="author"><name><surname>Enright</surname><given-names>Anton J.</given-names></name><email>aje@ebi.ac.uk</email><xref rid="af005" ref-type="aff">a</xref><xref rid="cor1" ref-type="corresp">&#x0204e;</xref></contrib></contrib-group><aff id="af005"><label>a</label>EMBL &#x02013; European Bioinformatics Institute, Wellcome Trust Genome Campus, Hinxton, Cambridge, CB10 1SD, UK</aff><aff id="af010"><label>b</label>National Laboratory of Genomics for Biodiversity (Langebio), Cinvestav, Irapuato, Guanajuato, Mexico</aff><author-notes><corresp id="cor1"><label>&#x0204e;</label>Corresponding author. <email>aje@ebi.ac.uk</email></corresp><fn id="fn1"><label>1</label><p>These authors contributed equally to this work.</p></fn></author-notes><pub-date pub-type="pmc-release"><day>01</day><month>9</month><year>2013</year></pub-date><!-- PMC Release delay is 0 months and 0 days and was based on <pub-date						pub-type="ppub">.--><pub-date pub-type="ppub"><day>01</day><month>9</month><year>2013</year></pub-date><volume>63</volume><issue>1</issue><fpage>41</fpage><lpage>49</lpage><permissions><copyright-statement>&#x000a9; 2013 The Authors</copyright-statement><copyright-year>2013</copyright-year><license license-type="CC BY-NC-ND" xlink:href="http://creativecommons.org/licenses/by-nc-nd/3.0/"><license-p>This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/3.0/).</license-p></license></permissions><abstract><p>New sequencing technologies pose significant challenges in terms of data complexity and magnitude. It is essential that efficient software is developed with performance that scales with this growth in sequence information. Here we present a comprehensive and integrated set of tools for the analysis of data from large scale sequencing experiments. It supports adapter detection and removal, demultiplexing of barcodes, paired-end data, a range of read architectures and the efficient removal of sequence redundancy. Sequences can be trimmed and filtered based on length, quality and complexity. Quality control plots track sequence length, composition and summary statistics with respect to genomic annotation. Several use cases have been integrated into a single streamlined pipeline, including both mRNA and small RNA sequencing experiments. This pipeline interfaces with existing tools for genomic mapping and differential expression analysis.</p></abstract><kwd-group><title>Keywords</title><kwd>Algorithms</kwd><kwd>Tools</kwd><kwd>RNAseq</kwd><kwd>NGS</kwd><kwd>Next-generation sequencing</kwd><kwd>Sequencing</kwd><kwd>Adapter trimming</kwd><kwd>Pipelines</kwd></kwd-group></article-meta></front><body><sec sec-type="intro" id="s0005"><label>1</label><title>Introduction</title><p>Next-generation sequencing has revolutionised our ability to perform high-throughput genomic experiments <xref rid="b0070" ref-type="bibr">[14]</xref>. The analysis of such sequencing data presents several specific problems. Firstly, sequences may be contaminated with adapters ligated to their 5&#x02032; or 3&#x02032; ends as part of the sequencing protocol. This is an even greater problem for small RNA sequencing (sRNA-seq) where the molecule being studied is usually shorter than the read-length obtained (typically 19&#x02013;22&#x000a0;nt of 36&#x000a0;nt). Hence, for sRNA-seq the majority of sequences obtained will exhibit adapter contamination <xref rid="b0025" ref-type="bibr">[5]</xref>. Secondly, base quality and sequence complexity vary both within and between reads. It is desirable to remove or trim such sequences with appropriate thresholds. Finally, sequences generated tend to be highly redundant with the same sequence represented large numbers of times in the input file. This is a particular problem for sRNA-seq data where a small pool of molecules has been sequenced to high count depth. This redundancy should ideally be filtered and tracked to make downstream analysis more efficient and also potentially reduce PCR amplification artefacts <xref rid="b0080" ref-type="bibr">[16]</xref>. An additional complication is that it is increasingly common to add small tags (barcodes) to molecules being sequenced in order to multiplex samples through a single experiment. The presence or absence of multiplexed barcodes coupled with sequencing adapters and potentially other sequence inserts mean that sequenced reads may have complicated geometries. Such complex geometries need to be decoded in order to proceed with sequence analysis.</p><p>The problems listed above are made more pressing by the increasing popularity of these technologies, decreasing costs involved and increasing numbers of nucleotides per experiment. It is imperative that tools can not only handle current requirements for analysis, but also scale to meet the demands of sequencing in the coming years.</p><p>Several tools and resources are available for performing this kind of analysis (e.g. <xref rid="b0030 b0050 b0055 b0060 b0065" ref-type="bibr">[6,10,11,12,13]</xref> with different sets of features (<xref rid="t0005" ref-type="table">Table 1</xref>)). In many cases these tools require the availability of high-performance supercomputing clusters, large memory computers or a significant amount of compute time. In some cases entire pipelines are available for specific analysis scenarios while in other cases individual stand-alone tools are available for specific tasks. It is important that such tools not only be flexible and adaptable but also efficient both in terms of run-time and memory footprint. Additionally, such tools should be straightforward to setup, run and interpret across a wide range of experimental designs.</p><p>In order to help address these challenges, we have developed a comprehensive suite of tools specifically tailored for processing RNA sequencing results. The suite is capable of handling multiplexed data, recognizes common read geometries, produces reports, plots and summary statistics, and can process several FASTQ files in parallel. The core processing tools have been written in optimized C with speed and memory-efficiency as key design elements. This allows processing of large datasets on modest computing resources such as a laptop computer. These stand-alone tools are also incorporated into a pipeline called SequenceImp.</p></sec><sec id="s0010"><label>2</label><title>Implementation</title><p>The Kraken suite encompasses several components (<xref rid="f0005" ref-type="fig">Fig. 1</xref>). Three of these are dedicated stand-alone tools: Reaper for demultiplexing, cleaning and filtering reads and Tally for deduplicating, and counting reads, as well as re-pairing independently filtered paired-end sequence data. Additionally, a small utility called Minion is provided to deduce adapters from raw sequencing data. The over-arching SequenceImp program utilizes Reaper and Tally as part of a pipeline designed to address a series of experimental scenarios. These components are further described below. SequenceImp can be used for small RNA sequence analysis and paired-end RNA-seq cleanup and quality control. Extensive documentation detailing further options is provided both online and with the software.</p><sec id="s0015"><label>2.1</label><title>Reaper &#x02013; a fast and flexible short read processing engine</title><p>Reaper is a fast and highly memory-efficient program written in C, able to process 60&#x02013;200&#x000a0;M reads per hour. It allows tunable identification and stripping of adaptor sequences using Smith&#x02013;Waterman alignments, recognizes several types of barcode position and read layout, demultiplexes barcoded sequence reads and generates extensive summary statistics including base call quality and tri-nucleotide complexity scores (Eq. 1) that can be used to perform quality control.</p><p>Users can specify their own input and output formats in a simple specification language. By default Reaper expects FASTQ input. Reaper has been designed to address complex experimental designs and allow filtering based on a range of parameters within a single iteration of the software with minimal impact on speed and memory requirements.<disp-formula id="e0005"><mml:math id="M1" altimg="si1.gif" overflow="scroll"><mml:mi>S</mml:mi><mml:mo>=</mml:mo><mml:mn>100</mml:mn><mml:msqrt><mml:mrow><mml:msubsup><mml:mrow><mml:mo>&#x02211;</mml:mo></mml:mrow><mml:mrow><mml:mi>i</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mn>64</mml:mn></mml:mrow></mml:msubsup><mml:msup><mml:mrow><mml:mfenced open="(" close=")"><mml:mrow><mml:mfrac><mml:mrow><mml:msub><mml:mrow><mml:mi>N</mml:mi></mml:mrow><mml:mrow><mml:mi>i</mml:mi></mml:mrow></mml:msub><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mrow><mml:mi>L</mml:mi><mml:mo>-</mml:mo><mml:mn>3</mml:mn></mml:mrow></mml:mfrac></mml:mrow></mml:mfenced></mml:mrow><mml:mrow><mml:mn>2</mml:mn></mml:mrow></mml:msup></mml:mrow></mml:msqrt></mml:math></disp-formula></p><p>Eq. 1: Tri-nucleotide complexity score <italic>S</italic> as computed by Reaper and Tally. <italic>L</italic> is the length of the sequence, <italic>N<sub>i</sub></italic> represents the count of an individual trimer sequence (of 64 possible combinations). The scores scale between 0 and 100 where 100 is a polymer sequence of the same nucleotide.</p></sec><sec id="s0020"><label>2.2</label><title>Tally &#x02013; collation of sequences in a memory and time efficient manner</title><p>After initial processing with Reaper, the resulting collection of cleaned and filtered sequence may be highly redundant, especially for sRNA-seq. Many sequences (e.g. those corresponding to high-abundance microRNAs) are found in very high copy numbers, sometimes exceeding a million copies. Although a near-trivial task, deduplicating and counting large numbers of sequences can become a processing bottleneck if not optimized, due to memory pressure, or worse, disk access. We have developed Tally, a C-program that tallies redundant sequences in-memory. It minimizes memory usage by efficient allocation and hashing techniques combined with sequence compression. It has several additional features, such as the ability to re-pair and tally independently processed paired-end files. It can also track quality scores and does so in a highly memory-efficient manner (see Section <xref rid="s0075" ref-type="sec">4</xref>). It transparently reads and writes either compressed or uncompressed files and supports a variety of input and output formats.</p></sec><sec id="s0025"><label>2.3</label><title>Minion &#x02013; inferring adapter sequences from raw sequencing data</title><p>The vast majority of next-generation sequencing experiments will attach adapter sequence to the sequencing construct. In many cases these are standard sequences that can be obtained from the vendor and/or sequencing centre. Unfortunately sometimes adapter information is not properly tracked and attached as metadata to the raw sequencing data and may not be known for a given sample. To alleviate this problem, we have developed Minion, a C-program that uses De Bruijn graphs <xref rid="b0075" ref-type="bibr">[15]</xref> to detect sequence fragments with characteristics typical of adapter sequence such as high abundance towards the 3&#x02032; end of reads.</p></sec><sec id="s0030"><label>2.4</label><title>SequenceImp &#x02013; high-throughput next-generation RNA sequence analysis pipeline</title><p>The SequenceImp pipeline incorporates the tools described above into a system for analysing high-throughput sequencing studies that produce FASTQ output (<xref rid="f0005" ref-type="fig">Fig. 1</xref>). The pipeline allows simultaneous analysis of multiple FASTQ files through a single command.</p><p>The pipeline requires a tab delimited description of the each FASTQ file to be processed (<xref rid="f0005" ref-type="fig">Fig. 1</xref>). Each file is associated with a read geometry. This specifies the expected configuration of the RNA/DNA fragment in relation to other sequences that become associated with it during sample preparation (e.g. <xref rid="f0010" ref-type="fig">Fig. 2</xref>). In addition to the geometry, files are supplied with their adapter sequences, barcodes and sequence inserts (if used). This provides a flexible way by which to define samples derived from many preparation methods.</p><p>Additional parameters to direct the analysis of a specific experiment may be specified in a separate configuration file or selected from a set of default files that incorporate the settings for various common experimental situations (<xref rid="f0005" ref-type="fig">Fig. 1</xref>). This allows further control over aspects such as read filtering and mapping. The data, description and a configuration file (either default or user-defined) are the minimal set of experiment specific files that the user must provide to proceed with an analysis. The pipeline step (see below) and, at later stages, the analysis directory produced by the pipeline and an annotation directory must also be provided as command line options.</p><p>The pipeline is written in Perl and R. It requires a number of packages (GenomicRanges, IRanges, gplots and ShortRead) within the R/Bioconductor <xref rid="b0020" ref-type="bibr">[4]</xref> framework. If mapping analysis is needed then Bowtie <xref rid="b0040" ref-type="bibr">[8]</xref> and Samtools <xref rid="b0045" ref-type="bibr">[9]</xref> are required. At each step standard formats are used to ensure that data derived at each stage of the pipeline will be easily compatible with external tools and pipelines. Below we describe the two major modes of operation for the pipeline.</p></sec><sec id="s0035"><label>2.5</label><title>Small RNA sequence analysis</title><p>For small RNA analysis the pipeline is divided into a series of sequential steps; <italic>organise</italic>, <italic>reaper</italic>, <italic>filter</italic>, <italic>align</italic> and <italic>features</italic> (<xref rid="f0005" ref-type="fig">Fig. 1</xref>). At each stage, along with the processed data, a PDF file summarising the statistics associated with each FASTQ file is produced, where appropriate.</p><p>The <italic>organise</italic> step creates a new analysis directory to store all the files and information associated with the set of FASTQ files specified in the description file and arranges a file structure compatible with subsequent steps. The <italic>reaper</italic> step provides the interface with the Reaper and Tally software (Sections <xref rid="s0015 s0020" ref-type="sec">2.1 and 2.2</xref>). FASTQ files are cleaned, adapter sequences are trimmed (3&#x02032; adapter contamination) or reads are removed (5&#x02032; adapter contamination if specified) and multiplexed samples are separated into independent sequence files. The pipeline is able to deconvolute samples with various barcode geometries. Reaper can also be used to trim and clean based on additional criteria. By default this cleaning process is performed with a set of Reaper settings associated with the geometry specified within the description file. The sequence files produced are collapsed to include only non-redundant reads and the number of occurrences of each.</p><p>The <italic>filter</italic> step takes the FASTA files produced and filters them according to user-defined cutoffs for read length and Reaper tri-nucleotide scores. A defined number of bases can be clipped from the ends of reads this stage.</p><p>The <italic>align</italic> stage uses Bowtie to align filtered reads to the genome of the relevant species. Alignments can be recorded in either standard Bowtie format or SAM format (for compatibility with external tools). In the case of SAM two additional optional fields are added to each record, the redundant read depth represented by each unique sequence and the number of loci to which it maps.</p><p>The <italic>features</italic> stage of the pipeline can perform a preliminary analysis for either miRNAs or repeats (<xref rid="f0005" ref-type="fig">Fig. 1</xref>). In the case of miRNAs, genomic alignments are compared to genomic coordinates for miRBase <xref rid="b0035" ref-type="bibr">[7]</xref> mature miRNAs, resulting in a matrix of redundant and non-redundant read depths for each known mature miRNA. Due to the complexities of dealing with short reads mapping to multiple loci, a number of options for dealing with multi-mapping reads are provided (see below). In the case of repeat analysis the filtered reads are aligned using Bowtie to repeat sequences and realigned to the genome for rudimentary normalization purposes. Alignments to repeats are again recorded in SAM/BAM <xref rid="b0045" ref-type="bibr">[9]</xref> format.</p></sec><sec id="s0040"><label>2.6</label><title>Paired-end RNAseq read cleanup and QC</title><p>The pipeline is able to clean up and provide QC for standard paired-end sequencing data. Paired end analysis follows the same, stepwise, principle described above and is compatible with the <italic>organize</italic>, <italic>reaper</italic> and <italic>filter</italic> pipeline steps. FASTQ files are passed to the pipeline as pairs within the description file, each pair sharing adapter information. In this case the pipeline proceeds in a different mode, trimming reads from each pair with Reaper independently, performing reverse complementation and swapping the adapter sequences for the second file in the pair. In this mode the pipeline uses Reaper to record a read index (<italic>record offset</italic>) in the read header as it trims reads, denoting the position of a read within the FASTQ input file. Read redundancy is subsequently removed in the <italic>filter</italic> stage of the pipeline. In <italic>paired</italic> mode, while removing redundancy and filtering reads based on the user&#x02019;s criteria, Tally uses the Reaper defined read index to maintain correct read pairing within the Tally output. As a consequence the output from Tally contains non-redundant read pairs while ensuring compatibility with downsteam tools. For FASTQ output, Tally reports the maximum quality per base from deduplicated sequence reads.</p></sec><sec id="s0045"><label>2.7</label><title>Annotation</title><p>The <italic>reaper</italic> and <italic>filter</italic> stages of the pipeline are not species specific. The <italic>align</italic> and <italic>features</italic> steps reference genomic annotation data. All annotation data is supplied, pre-formatted, along with the pipeline scripts. In the current version of the pipeline, formatted annotation is available for human, mouse (<italic>Mus musculus</italic>), <italic>Arabidopsis thaliana</italic>, <italic>Caenorhabditis elegans</italic> and <italic>Drosophila melanogaster</italic> samples. Genomic sequence files and annotation are obtained from Ensembl <xref rid="b0015" ref-type="bibr">[3]</xref>. For comparison to reads in the <italic>align</italic> step of the pipeline, feature overlaps are removed according to a feature hierarchy. miRNA annotation for the <italic>features</italic> step is obtained from miRBase <xref rid="b0035" ref-type="bibr">[7]</xref>. Repeat sequences for the <italic>feature</italic>s step are obtained from NCBI. All sets of coordinates are converted into R objects for integration into the analysis pipeline. All reference sequences for read alignment are converted into Bowtie indexes.</p></sec></sec><sec sec-type="results" id="s0050"><label>3</label><title>Results</title><p>In order to illustrate the functionality and features of the Kraken suite we have applied it to a number of example datasets that encompass a range of use cases. The sections below present, in detail, the analysis procedures for various datasets and protocols together with a description of QC and analysis features. More details concerning these worked examples are available on the website.</p><sec id="s0055"><label>3.1</label><title>miRNA sequencing experiment with a 5&#x02032; barcode</title><p>This example is taken from Alon et al. <xref rid="b0005" ref-type="bibr">[1]</xref>. Ten aliquots, each with a unique 4&#x000a0;nt barcode sequence at the 5&#x02032; end of the RNA/DNA fragment followed by a 2 base sequence insert (<xref rid="f0010" ref-type="fig">Fig. 2</xref>A) were mixed and sequenced together in a single sequencing lane. This complex sequence arrangement can be defined in the description file. Here the pipeline has been run with one of several sets of default configurations, in this case to ultimately quantify mouse miRBase miRNAs in each of the ten barcoded samples. During the <italic>reaper</italic> step, Reaper trimmed the 3&#x02032; adapter sequence from the reads, removed reads containing the 5&#x02032; adapter sequence, sorted reads according to their 5&#x02032; barcode and removed the barcode and sequence insert sequences from the start of each read. Finally reads were trimmed following short tracts (5&#x000a0;nt) containing multiple N&#x02019;s (&#x0003e;2). Quality control information is provided for each sample within the FASTQ file (<xref rid="f0015" ref-type="fig">Fig. 3</xref>A) with metrics also describing reads for which no barcode was identified.</p><p>The <italic>filter</italic> step selects reads from each sample between 18 and 26&#x000a0;nt in length (<xref rid="f0015" ref-type="fig">Fig. 3</xref>B). These are subsequently mapped to the genome. Mapping information is summarised in a further set of plots and the 5&#x02032; ends of mapped reads are compared to Ensembl annotation <xref rid="b0015" ref-type="bibr">[3]</xref> to give an impression of the genomic composition of each barcoded sample (<xref rid="f0015" ref-type="fig">Fig. 3</xref>C). As expected, in this case, the vast majority of mapped and annotated reads for each sample overlap miRNAs. Finally, in the <italic>features</italic> step, the complete genomic alignments are overlapped with miRBase mature miRNA annotations. Where reads overlap a miRNA locus by a specified number of nucleotides (15 or more), they are assigned to the miRNA and added to the miRNA count. These numbers may be fractions as reads mapping to more than one location may be split between loci according to the multi-mapping option specified.</p><p>The results are summarised below (<xref rid="t0010" ref-type="table">Table 2</xref>).</p></sec><sec id="s0060"><label>3.2</label><title>piRNA sequencing experiment with a 5&#x02032; barcode</title><p>These data are obtained from a piwi-associated RNA (piRNA) sequencing experiment. The sequence libraries once again have a 5&#x02032; barcode (<xref rid="f0010" ref-type="fig">Fig. 2</xref>B), with multiple samples being sequenced together using barcode multiplexing. In this case no sequence insert is included between the barcode and the RNA/DNA fragment during library preparation. The pipeline proceeds as above, using default parameters for Reaper, according to the read geometry, and a default configuration file for mouse piRNA analysis. In this case, however, multiple FASTQ files are processed simultaneously. Each raw file is annotated as a single line in the description file. Multi-processor threading allows the pipeline to perform the sequential <italic>reaper</italic>, <italic>filter</italic>, <italic>align</italic> and <italic>features</italic> steps in parallel for each of the FASTQ files accelerating the procedure across all data sets, if sufficient processors are available. For repeat analysis the final output of the <italic>features</italic> step differs to that described above, instead examining read length, distribution and overlap when mapped to repeat sequences (<xref rid="f0020" ref-type="fig">Fig. 4</xref>A). Currently repeat analysis is only supported for mouse but we hope to expand this to include other species.</p></sec><sec id="s0065"><label>3.3</label><title>Small RNA sequencing with no barcode</title><p>This data set is obtained from the Hannon, Guigo and Gingeras laboratories as part of the ENCODE project <xref rid="b0010" ref-type="bibr">[2]</xref> (<xref rid="f0010" ref-type="fig">Fig. 2</xref>D). The dataset GEO Accession is GSM973684. The sample preparation involved a poly-adenylation step and adenine represents a large proportion of bases found at each sequence position within the input file (<xref rid="f0020" ref-type="fig">Fig. 4</xref>B). To trim and clean up the FASTQ files prior to downstream analysis we applied additional filters within Reaper. Rather than using the default parameters provided within the pipeline for the geometry, user-defined options can be passed to Reaper. In this case we altered the parameters required for identifying a 3&#x02032; adapter match, added a minimum clean read length, initiated trimming based on quality score and trimmed low complexity sequences, enriched in adenine from the 3&#x02032; end of reads both before and after adapter removal (<xref rid="f0020" ref-type="fig">Fig. 4</xref>B).</p><p>Users can define their own pipeline analysis configurations by providing an edited experimental configuration file. In this case the configuration file directed the pipeline to user defined Reaper configurations.</p></sec><sec id="s0070"><label>3.4</label><title>Paired end RNA sequencing</title><p>Here we have filtered and trimmed a dataset which contains no barcode and no sequence inserts between the adapter sequences and the RNA/DNA fragment (<xref rid="f0010" ref-type="fig">Fig. 2</xref>C). The paired FASTQ files are passed to the pipeline together but processed individually at the <italic>reaper</italic> stage, with adapter sequences determined according to whether the file corresponds to the first or second sequencing reaction (Section <xref rid="s0040" ref-type="sec">2.6</xref>). In contrast, at the <italic>filter</italic> stage, Tally filters and removes redundancy from each file simultaneously, pairing reads and reporting the number of reads removed through filters and file mismatches. These metrics are visualised by the pipeline (<xref rid="f0020" ref-type="fig">Fig. 4</xref>C).</p><p>When analyzing sequencing datasets, it is not always a trivial task to identify the adapter sequences used to derive the sequencing libraries. We used Minion to identify the adapter sequences in this paired-end, RNAseq data set. By comparing the sequences reported by Minion to known adapter sequences frequently used in sequence library preparation it is possible to confirm their origins. Once confirmed, these sequences can then be supplied to the pipeline in the sample description file, to be trimmed from the FASTQ files by Reaper.</p></sec></sec><sec id="s0075"><label>4</label><title>Benchmarks</title><p>In order to assess the performance of the Kraken suite we have performed benchmarking of its key components and compared them to other widely-available tools with similar functionality. Benchmarking presents challenges as each method has its own parameters which can greatly affect performance. In general we have benchmarked at three different levels: Adapter removal in its simplest possible form, adapter removal combined with barcode resolution and adapter removal with advanced cleaning features (e.g. low-complexity sequence removal). Benchmarking was performed using a dataset comprising of four lanes of small RNA sequencing data containing 1, 5, 10 and 25&#x000a0;million sequences in four separate FASTQ files. Additionally, the parallel performance of the methods was assessed by running these analyses on 1, 2 and 4 processors. All analyses were performed using the local disk on a dedicated 24 processor Linux benchmarking machine. In all cases the input format was compressed FASTQ sequencing data and the output was also compressed FASTQ.</p><p>The benchmarking results indicate (<xref rid="f0025" ref-type="fig">Fig. 5</xref>) that the Kraken system outperforms all but one method. The fastest approach (btrim) <xref rid="b0030" ref-type="bibr">[6]</xref> has few features except for simple adapter removal. Even given the disparity in terms of features, Reaper trimming is only 10.6% slower than Btrim (1.28 versus 1.42 million reads per minute, respectively) on average across the test samples sets (<xref rid="f0025" ref-type="fig">Fig. 5</xref>). The closest alternative tool was the FASTX toolkit (0.85&#x000a0;million reads per minute), which again has a rich feature set for trimming.</p><p>Although a near trivial task, deduplication of large sequencing data can become a bottleneck due to memory pressure, or in the worst case, disk access. The Tally program described above is optimised for efficient memory allocation and hashing techniques and reduces memory by compressing sequences.</p><p>We sought to benchmark deduplication in terms of both memory and time and considered three different approaches. The first is Fastx_collapser, an efficient and fast program written in C++ and part of the FASTX toolkit. The second is Tally, part of Kraken. The third is a simple Perl program (provided at the Kraken website in the &#x02018;supporting material&#x02019; section), which performs deduplication by means of an associative array. Perl associative arrays are heavily optimized and competing approaches should do at least as well. The dataset used for deduplication was the ENCODE cleaned dataset described above (Section <xref rid="s0065" ref-type="sec">3.3</xref>) consisting of 65&#x000a0;M reads with 2.5 gigabases. The results (<xref rid="f0025" ref-type="fig">Fig. 5</xref>B) show that both Tally and Fastx_collapser outperform the simple Perl program, being both faster and using less memory. Tally however, uses less than a third of the memory required by fastx (<xref rid="f0025" ref-type="fig">Fig. 5</xref>B). Also shown are the measurements for a tally run on the same data where it kept track of quality scores for each deduplicated read. In this mode tally associates the highest quality score observed for each base in a read. This is highly useful as it may be beneficial when mapping singleton and low-count reads to have quality scores associated with them. Tally is still more memory efficient in this mode when compared to fastx_collapser. Finally, we remark that the fastx_collapser and tally run-times are entirely dominated by the reading and writing stages of processing, hence the memory requirements are most relevant. In practice we have processed paired-end data from multiple lanes with more than 20&#x000a0;gigabases, requiring more than 40&#x000a0;Gb of memory.</p></sec><sec sec-type="conclusions" id="s0080"><label>5</label><title>Conclusion</title><p>We present Kraken, a suite of tools for the analysis of next-generation sequencing datasets. These tools encompass adapter contaminant detection and removal (Minion and Reaper), cleaning of low-complexity and low-quality sequence tracts and other contaminants arising from sample preparation. The system supports multiplexed (barcoded) sample data and also complex sequence read geometries arising from different experimental protocols. The core tools can be accessed via an integrated pipeline for convenient high-throughput analysis of common data-types (SequenceImp). These tools have been designed to be lightweight and highly efficient in terms of memory usage and running time. All processing can be achieved using compressed sequence data and an additional tool (Tally) is capable of collapsing redundant sequence data allowing for smaller datasets. Benchmarking indicates that the core tools within Kraken are feature-rich without sacrificing performance and out-perform many existing tools. Detailed quality control metrics are provided together with useful downstream analyses for small RNA experiments (e.g. miRNAs and piRNAs). The tools together can be used as a stand-alone system to prepare samples and perform genomic mapping or used separately for dedicated tasks. We hope these tools will prove useful to the community.</p></sec><sec id="s0085"><label>6</label><title>Availability</title><p>Kraken and its component tools are freely available at <ext-link ext-link-type="uri" xlink:href="http://www.ebi.ac.uk/research/enright/software/kraken" id="ir0005">http://www.ebi.ac.uk/research/enright/software/kraken</ext-link> under the GNU Public License (GPLv3).</p></sec></body><back><ref-list><title>References</title><ref id="b0005"><label>1</label><element-citation publication-type="journal" id="h0005"><person-group person-group-type="author"><name><surname>Alon</surname><given-names>S.</given-names></name><name><surname>Vigneault</surname><given-names>F.</given-names></name><name><surname>Eminaga</surname><given-names>S.</given-names></name><name><surname>Christodoulou</surname><given-names>D.C.</given-names></name><name><surname>Seidman</surname><given-names>J.G.</given-names></name><name><surname>Church</surname><given-names>G.M.</given-names></name><name><surname>Eisenberg</surname><given-names>E.</given-names></name></person-group><source>Genome Res</source><volume>21</volume><issue>9</issue><year>2011</year><fpage>1506</fpage><lpage>1511</lpage><pub-id pub-id-type="pmid">21750102</pub-id></element-citation></ref><ref id="b0010"><label>2</label><element-citation publication-type="journal" id="h0010"><person-group person-group-type="author"><name><surname>ENCODE Project Consortium</surname></name></person-group><source>PLoS Biol</source><volume>9</volume><issue>4</issue><year>2011</year><fpage>e1001046</fpage><pub-id pub-id-type="pmid">21526222</pub-id></element-citation></ref><ref id="b0015"><label>3</label><element-citation publication-type="journal" id="h0015"><person-group person-group-type="author"><name><surname>Flicek</surname><given-names>P.</given-names></name><name><surname>Amode</surname><given-names>M.R.</given-names></name><name><surname>Barrell</surname><given-names>D.</given-names></name><name><surname>Beal</surname><given-names>K.</given-names></name><name><surname>Brent</surname><given-names>S.</given-names></name><name><surname>Chen</surname><given-names>Y.</given-names></name></person-group><source>Nucl Acids Res</source><volume>39</volume><year>2011</year><fpage>D800</fpage><lpage>D806</lpage><pub-id pub-id-type="pmid">21045057</pub-id></element-citation></ref><ref id="b0020"><label>4</label><element-citation publication-type="journal" id="h0020"><person-group person-group-type="author"><name><surname>Gentleman</surname><given-names>R.C.</given-names></name><name><surname>Carey</surname><given-names>V.J.</given-names></name><name><surname>Bates</surname><given-names>D.M.</given-names></name><name><surname>Bolstad</surname><given-names>B.</given-names></name><name><surname>Dettling</surname><given-names>M.</given-names></name><name><surname>Dudoit</surname><given-names>S.</given-names></name></person-group><source>Genome Biol</source><volume>5</volume><issue>10</issue><year>2004</year><fpage>R80</fpage><pub-id pub-id-type="pmid">15461798</pub-id></element-citation></ref><ref id="b0025"><label>5</label><element-citation publication-type="journal" id="h0025"><person-group person-group-type="author"><name><surname>Gunaratne</surname><given-names>P.H.</given-names></name><name><surname>Coarfa</surname><given-names>C.</given-names></name><name><surname>Soibam</surname><given-names>B.</given-names></name><name><surname>Tandon</surname><given-names>A.</given-names></name></person-group><source>Methods Mol Biol (Clifton, NJ)</source><volume>822</volume><year>2012</year><fpage>273</fpage><lpage>288</lpage></element-citation></ref><ref id="b0030"><label>6</label><element-citation publication-type="journal" id="h0030"><person-group person-group-type="author"><name><surname>Kong</surname><given-names>Y.</given-names></name></person-group><source>Genomics</source><volume>98</volume><issue>2</issue><year>2011</year><fpage>152</fpage><lpage>153</lpage><pub-id pub-id-type="pmid">21651976</pub-id></element-citation></ref><ref id="b0035"><label>7</label><element-citation publication-type="journal" id="h0035"><person-group person-group-type="author"><name><surname>Kozomara</surname><given-names>A.</given-names></name><name><surname>Griffiths-Jones</surname><given-names>S.</given-names></name></person-group><source>Nucl Acids Res</source><volume>39</volume><year>2011</year><fpage>D152</fpage><lpage>D157</lpage><pub-id pub-id-type="pmid">21037258</pub-id></element-citation></ref><ref id="b0040"><label>8</label><element-citation publication-type="journal" id="h0040"><person-group person-group-type="author"><name><surname>Langmead</surname><given-names>B.</given-names></name><name><surname>Salzberg</surname><given-names>S.L.</given-names></name></person-group><source>Nat Methods</source><volume>9</volume><issue>4</issue><year>2012</year><fpage>357</fpage><lpage>359</lpage><pub-id pub-id-type="pmid">22388286</pub-id></element-citation></ref><ref id="b0045"><label>9</label><element-citation publication-type="journal" id="h0045"><person-group person-group-type="author"><name><surname>Li</surname><given-names>H.</given-names></name><name><surname>Handsaker</surname><given-names>B.</given-names></name><name><surname>Wysoker</surname><given-names>A.</given-names></name><name><surname>Fennell</surname><given-names>T.</given-names></name><name><surname>Ruan</surname><given-names>J.</given-names></name><name><surname>Homer</surname><given-names>N.</given-names></name></person-group><source>Bioinformatics (Oxford, England)</source><volume>25</volume><year>2009</year><fpage>2078</fpage><lpage>2079</lpage></element-citation></ref><ref id="b0050"><label>10</label><element-citation publication-type="journal" id="h0050"><person-group person-group-type="author"><name><surname>Lindgreen</surname><given-names>S.</given-names></name></person-group><source>BMC Res Notes</source><volume>5</volume><issue>1</issue><year>2012</year><fpage>337</fpage><pub-id pub-id-type="pmid">22748135</pub-id></element-citation></ref><ref id="b0055"><label>11</label><element-citation publication-type="journal" id="h0055"><person-group person-group-type="author"><name><surname>Lohse</surname><given-names>M.</given-names></name><name><surname>Bolger</surname><given-names>A.M.</given-names></name><name><surname>Nagel</surname><given-names>A.</given-names></name><name><surname>Fernie</surname><given-names>A.R.</given-names></name><name><surname>Lunn</surname><given-names>J.E.</given-names></name><name><surname>Stitt</surname><given-names>M.</given-names></name><name><surname>Usadel</surname><given-names>B.</given-names></name></person-group><source>Nucl Acids Res</source><volume>40</volume><issue>W1</issue><year>2012</year><fpage>W622</fpage><lpage>W627</lpage><pub-id pub-id-type="pmid">22684630</pub-id></element-citation></ref><ref id="b0060"><label>12</label><element-citation publication-type="journal" id="h0060"><person-group person-group-type="author"><name><surname>Martin</surname><given-names>M.</given-names></name></person-group><source>EMBnet J</source><volume>17</volume><issue>1</issue><year>2011</year><fpage>10</fpage><lpage>12</lpage></element-citation></ref><ref id="b0065"><label>13</label><element-citation publication-type="journal" id="h0065"><person-group person-group-type="author"><name><surname>Moxon</surname><given-names>S.</given-names></name><name><surname>Schwach</surname><given-names>F.</given-names></name><name><surname>Dalmay</surname><given-names>T.</given-names></name><name><surname>MacLean</surname><given-names>D.</given-names></name><name><surname>Studholme</surname><given-names>D.J.</given-names></name><name><surname>Moulton</surname><given-names>V.</given-names></name></person-group><source>Bioinformatics (Oxford, England)</source><volume>24</volume><issue>19</issue><year>2008</year><fpage>2252</fpage><lpage>2253</lpage></element-citation></ref><ref id="b0070"><label>14</label><element-citation publication-type="journal" id="h0070"><person-group person-group-type="author"><name><surname>Nekrutenko</surname><given-names>A.</given-names></name><name><surname>Taylor</surname><given-names>J.</given-names></name></person-group><source>Nat Rev Genet</source><volume>13</volume><issue>9</issue><year>2012</year><fpage>667</fpage><lpage>672</lpage><pub-id pub-id-type="pmid">22898652</pub-id></element-citation></ref><ref id="b0075"><label>15</label><element-citation publication-type="journal" id="h0075"><person-group person-group-type="author"><name><surname>Pevzner</surname><given-names>P.A.</given-names></name><name><surname>Tang</surname><given-names>H.</given-names></name><name><surname>Waterman</surname><given-names>M.S.</given-names></name></person-group><source>Proc Natl Acad Sci USA</source><volume>98</volume><issue>17</issue><year>2001</year><fpage>9748</fpage><lpage>9753</lpage><pub-id pub-id-type="pmid">11504945</pub-id></element-citation></ref><ref id="b0080"><label>16</label><element-citation publication-type="journal" id="h0080"><person-group person-group-type="author"><name><surname>Taub</surname><given-names>M.A.</given-names></name><name><surname>Corrada Bravo</surname><given-names>H.</given-names></name><name><surname>Irizarry</surname><given-names>R.A.</given-names></name></person-group><source>Genome Med</source><volume>2</volume><issue>12</issue><year>2010</year><fpage>87</fpage><pub-id pub-id-type="pmid">21144010</pub-id></element-citation></ref></ref-list><ack id="ak005"><title>Acknowledgements</title><p>We thank the members of the Enright lab for critical testing and feedback. Additionally we would like to thank Stathis Kanterakis, Ugis Sarkans, Maria Krestyaninova, Balaji Rajashekar, Raivo Kolde and Jaak Vilo for feedback on early test versions. Early versions of this software were funded by the EU FP7 (SIROCCO, LSHG-CT-2006-037900) and later versions and development have been supported by BBSRC UK (BB/01589X/1).</p></ack><fn-group><fn id="d32e403"><label>&#x02606;</label><p>This is an open-access article distributed under the terms of the Creative Commons Attribution-NonCommercial-No Derivative Works License, which permits non-commercial use, distribution, and reproduction in any medium, provided the original author and source are credited.</p></fn></fn-group></back><floats-group><fig id="f0005"><label>Fig. 1</label><caption><p>Kraken suite. The Kraken tools are modular by nature, each addressing a discrete task. They are integrated into a workflow to process small RNA and paired end sequencing experiments. Parallel lines represent stages of the pipeline that can utilise multiple processors and analyse sequencing lanes concurrently.</p></caption><graphic xlink:href="gr1"/></fig><fig id="f0010"><label>Fig. 2</label><caption><p>Sample geometries. The position of adapter sequences, barcode sequences and sequence inserts relative to the library fragments in the sample libraries analysed in this manuscript.</p></caption><graphic xlink:href="gr2"/></fig><fig id="f0015"><label>Fig. 3</label><caption><p>Analysis of a barcoded small RNA cloning experiment. Examples of the plots produced by the SequenceImp pipeline to summarise the analysis of small RNA. (A) Two plots taken from the <italic>reaper</italic> stage of the SequenceImp pipeline. These plots describe the ACTG-barcoded sample before Reaper trims and cleans the reads. (B) The length of reads for the ACTG barcoded sample, at the <italic>filter</italic> stage. Trimming in the <italic>reaper</italic> step defines a clear 20&#x02013;23&#x000a0;nt peak in this sample. At the <italic>filter</italic> step reads can be selected for downstream analysis based on length. Solid bars correspond to those reads passed to the later stages of the pipeline. Hashed bars represent reads removed, falling outside the maximum and minimum length criteria. (C) Reads passed from the <italic>filter</italic> step which map to Ensembl annotation at the <italic>align</italic> stage of the pipeline are separated into individual annotation classes.</p></caption><graphic xlink:href="gr3"/></fig><fig id="f0020"><label>Fig. 4</label><caption><p>Examples of additional Kraken features. Additional examples of the plots produced by the pipeline when analysing alternative datasets based upon different criteria. (A) A repeat analysis can be performed at the <italic>features</italic> step of the pipeline. This will align reads to repeat sequences (in this case LINE1 (GeneBank: <ext-link ext-link-type="uri" xlink:href="ncbi-n:M13002.1" id="ir0010">M13002.1</ext-link>)) and calculate a series of metrics that can be used to identify signals apparent due to the presence of piRNAs within a sequencing sample. (B) Reaper can be applied with many different filtering and trimming options, here trimming 3&#x02032; adapter sequences, low complexity trailing sequences enriched in adenine, poor quality regions, sequences following regions enriched for N&#x02032;s and removing reads that are subsequently less than 10&#x000a0;nt in length. The pie chart summarises the reasons for which reads were removed from the sample in their entirety (e.g. fall below the length threshold passed to Reaper). <italic>discarded_length_cutoff</italic>: adapter trimming reduced the length of read below the length threshold specified in the Reaper configuration file, <italic>discarded_tri</italic>: the trimming of low complexity regions reduced the length below the threshold, <italic>discarded_QQQ</italic>: trimming of low quality bases reduced the read length below the length threshold. (C) For paired end sequencing Tally identifies redundant read sequences at the <italic>filter</italic> step. This plot describes the reasons that Tally discards reads from each of the paired samples, while ensuring read pairing.</p></caption><graphic xlink:href="gr4"/></fig><fig id="f0025"><label>Fig. 5</label><caption><p>Read trimming and filtering benchmarking. (A) Run-time for a test benchmark dataset of 1, 5, 10 and 25&#x000a0;million reads for Reaper, Btrim, Cutadapt, FASTX and Adapter Removal. For each size the total runtime in seconds for each method is given. Input was in all cases provided as compressed FASTQ format and output was compressed on the fly. The same adapter sequence and barcode sequences were provided to each method. (B) Memory usage and run-time benchmark for a deduplication task for a FASTQ file with 65&#x000a0;M reads and 2.5G bases. Results are shown for Tally, Fastx_collapser, and a simple custom Perl program employing an associative array, including a Tally run where quality data was tracked for each deduplicated read (using the per-base maximum quality score across all duplicated reads).</p></caption><graphic xlink:href="gr5"/></fig><table-wrap id="t0005" position="float"><label>Table 1</label><caption><p>Comparison of feature sets available in various tools. Each column represents specific features and whether or not they are supported by each toolkit (rows). Cells are highlighted in blue when that feature is present, in grey if it is not clear whether or not a particular feature is supported and in white if the feature is not supported. For each tool a URL is provided.</p></caption><table frame="hsides" rules="groups"><tbody><tr><td><inline-graphic xlink:href="fx1.gif"/></td></tr></tbody></table></table-wrap><table-wrap id="t0010" position="float"><label>Table 2</label><caption><p>Example miRNA counts for a single barcoded sample. The first column lists the miRBase mature miRNA sequence identified and the second identifies the hairpin sequence from which it originates. The last two columns specify the sequence depth identified for that molecule as both total sequencing depth and the total number of <italic>unique</italic> sequences identified. The count data here were requested to be split equally across loci for multi-mapping reads and hence are not whole numbers. A number of options for handling such occurrences are provided.</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Mature</th><th>Precursor</th><th>Width</th><th>ACTG_Read_Depth</th><th>ACTG_Non_Redundant_Reads</th></tr></thead><tbody><tr><td>mmu-miR-126-3p</td><td>mmu-mir-126</td><td>22</td><td>239276.4</td><td>2239.9</td></tr><tr><td>mmu-miR-30a-5p</td><td>mmu-mir-30a</td><td>22</td><td>50122.1</td><td>917.6</td></tr><tr><td>mmu-miR-378-3p</td><td>mmu-mir-378</td><td>21</td><td>69861.8</td><td>876.6</td></tr><tr><td>mmu-miR-24-3p</td><td>mmu-mir-24-2;mmu-mir-24-1</td><td>22</td><td>26338</td><td>683.9</td></tr><tr><td>mmu-miR-1a-3p</td><td>mmu-mir-1a-1;mmu-mir-1a-2</td><td>22</td><td>31360</td><td>553.1</td></tr><tr><td>mmu-miR-30a-3p</td><td>mmu-mir-30a</td><td>22</td><td>12362.4</td><td>504.2</td></tr><tr><td>mmu-miR-148a-3p</td><td>mmu-mir-148a</td><td>22</td><td>22958.4</td><td>503</td></tr><tr><td>mmu-let-7c-5p</td><td>mmu-let-7c-2;mmu-let-7c-1</td><td>22</td><td>10408.7</td><td>470.3</td></tr><tr><td>mmu-miR-499-5p</td><td>mmu-mir-499</td><td>21</td><td>18895.2</td><td>415.7</td></tr><tr><td>mmu-let-7f-5p</td><td>mmu-let-7f-1;mmu-let-7f-2</td><td>22</td><td>13510.8</td><td>412.5</td></tr><tr><td>mmu-miR-101a-3p</td><td>mmu-mir-101a</td><td>21</td><td>11545.6</td><td>409.2</td></tr><tr><td>mmu-miR-143-3p</td><td>mmu-mir-143</td><td>21</td><td>27757.1</td><td>389.2</td></tr><tr><td>mmu-miR-30e-3p</td><td>mmu-mir-30e</td><td>22</td><td>9638.3</td><td>380.1</td></tr><tr><td>mmu-miR-26a-5p</td><td>mmu-mir-26a-1;mmu-mir-26a-2</td><td>22</td><td>7579.6</td><td>304.7</td></tr><tr><td>mmu-let-7a-5p</td><td>mmu-let-7a-2;mmu-let-7a-1</td><td>22</td><td>4137.2</td><td>303.2</td></tr><tr><td>mmu-miR-21-5p</td><td>mmu-mir-21</td><td>22</td><td>5798.6</td><td>258</td></tr><tr><td>mmu-miR-30d-5p</td><td>mmu-mir-30d</td><td>22</td><td>4554</td><td>252</td></tr><tr><td>mmu-miR-30e-5p</td><td>mmu-mir-30e</td><td>22</td><td>4446.7</td><td>249.4</td></tr><tr><td>mmu-miR-133a-3p</td><td>mmu-mir-133a-2;mmu-mir-133a-1</td><td>22</td><td>1974.4</td><td>234.5</td></tr><tr><td>mmu-miR-27b-3p</td><td>mmu-mir-27b</td><td>21</td><td>4568.9</td><td>195.6</td></tr><tr><td>mmu-miR-152-3p</td><td>mmu-mir-152</td><td>21</td><td>6701.7</td><td>192.2</td></tr><tr><td>mmu-miR-10a-5p</td><td>mmu-mir-10a</td><td>23</td><td>2923.8</td><td>180.9</td></tr><tr><td>mmu-miR-125b-5p</td><td>mmu-mir-125b-1;mmu-mir-125b-2</td><td>22</td><td>3404</td><td>173.4</td></tr><tr><td>mmu-miR-101b-3p</td><td>mmu-mir-101b</td><td>21</td><td>2149.7</td><td>172.3</td></tr></tbody></table></table-wrap></floats-group></article>