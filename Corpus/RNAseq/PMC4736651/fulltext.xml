<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.1 20151215//EN" "JATS-archivearticle1.dtd"> 
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article"><?properties open_access?><?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?><?DTDIdentifier.IdentifierType public?><?SourceDTD.DTDName A++V2.4.dtd?><?SourceDTD.Version 2.4?><?ConverterInfo.XSLTName springer2nlmx2.xsl?><?ConverterInfo.Version 2?><front><journal-meta><journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id><journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id><journal-title-group><journal-title>BMC Bioinformatics</journal-title></journal-title-group><issn pub-type="epub">1471-2105</issn><publisher><publisher-name>BioMed Central</publisher-name><publisher-loc>London</publisher-loc></publisher></journal-meta><article-meta><article-id pub-id-type="pmcid">4736651</article-id><article-id pub-id-type="publisher-id">902</article-id><article-id pub-id-type="doi">10.1186/s12859-016-0902-3</article-id><article-categories><subj-group subj-group-type="heading"><subject>Software</subject></subj-group></article-categories><title-group><article-title>NEAT: a framework for building fully automated NGS pipelines and analyses</article-title></title-group><contrib-group><contrib contrib-type="author" corresp="yes"><name><surname>Schorderet</surname><given-names>Patrick</given-names></name><address><email>patrick.schorderet@molbio.mgh.harvard.edu</email></address><xref ref-type="aff" rid="Aff1"/><xref ref-type="aff" rid="Aff2"/></contrib><aff id="Aff1"><label/>Department of Molecular Biology, Massachusetts General Hospital, Boston, MA 02114 USA </aff><aff id="Aff2"><label/>Department of Genetics, Harvard Medical School, Boston, MA 02115 USA </aff></contrib-group><pub-date pub-type="epub"><day>1</day><month>2</month><year>2016</year></pub-date><pub-date pub-type="pmc-release"><day>1</day><month>2</month><year>2016</year></pub-date><pub-date pub-type="collection"><year>2016</year></pub-date><volume>17</volume><elocation-id>53</elocation-id><history><date date-type="received"><day>5</day><month>8</month><year>2015</year></date><date date-type="accepted"><day>21</day><month>1</month><year>2016</year></date></history><permissions><copyright-statement>&#x000a9; Schorderet. 2016</copyright-statement><license license-type="OpenAccess"><license-p><bold>Open Access</bold>This article is distributed under the terms of the Creative Commons Attribution 4.0 International License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated.</license-p></license></permissions><abstract id="Abs1"><sec><title>Background</title><p>The analysis of next generation sequencing (NGS) has become a standard task for many laboratories in the life sciences. Though there exists several tools to support users in the manipulation of such datasets on various levels, few are built on the basis of vertical integration. Here, we present the <italic>NE</italic>xt generation <italic>A</italic>nalysis <italic>T</italic>oolbox (NEAT) that allows non-expert users including wet-lab scientists to comprehensively build, run and analyze NGS data through double-clickable executables without the need of any programming experience.</p></sec><sec><title>Results</title><p>In comparison to many publicly available tools including Galaxy, NEAT provides three main advantages: (1) Through the development of double-clickable executables, NEAT is efficient&#x000a0;(completes within &#x0003c;24 hours), easy to implement and intuitive; (2) Storage space, maximum number of job submissions, wall time and cluster-specific parameters can be customized as NEAT is run on the institution&#x02019;s cluster; (3) NEAT allows users to visualize and summarize NGS data rapidly and efficiently using various built-in exploratory data analysis tools including metagenomic and differentially expressed gene analysis.</p><p>To simplify the control of the workflow, NEAT projects are built around a unique and centralized file containing sample names, replicates, conditions, antibodies, alignment-, filtering- and peak calling parameters as well as cluster-specific paths and settings. Moreover, the small-sized files produced by NEAT allow users to easily manipulate, consolidate and share datasets from different users and institutions.</p></sec><sec><title>Conclusions</title><p>NEAT provides biologists and bioinformaticians with a robust, efficient and comprehensive tool for the analysis of massive NGS datasets. Frameworks such as NEAT not only allow novice users to overcome the increasing number of technical hurdles due to the complexity of manipulating large datasets, but provide more advance users with tools that ensure high reproducibility standards in the NGS era. NEAT is publically available at <ext-link ext-link-type="uri" xlink:href="https://github.com/pschorderet/NEAT">https://github.com/pschorderet/NEAT</ext-link>.</p></sec><sec><title>Electronic supplementary material</title><p>The online version of this article (doi:10.1186/s12859-016-0902-3) contains supplementary material, which is available to authorized users.</p></sec></abstract><kwd-group xml:lang="en"><title>Keywords</title><kwd>Bioinformatics</kwd><kwd>Genomics</kwd><kwd>High throughput sequencing</kwd><kwd>RNAseq</kwd><kwd>ChIPseq</kwd><kwd>NGS pipelines</kwd></kwd-group><funding-group><award-group><funding-source><institution-wrap><institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100000057</institution-id><institution>National Institute of General Medical Sciences (US)</institution></institution-wrap></funding-source><award-id>R37 GM48405-21</award-id></award-group><award-group><funding-source><institution>Swiss National Foundation</institution></funding-source><award-id>P300P3_158516</award-id><principal-award-recipient><name><surname>Schorderet</surname><given-names>Patrick</given-names></name></principal-award-recipient></award-group></funding-group><custom-meta-group><custom-meta><meta-name>issue-copyright-statement</meta-name><meta-value>&#x000a9; The Author(s) 2016</meta-value></custom-meta></custom-meta-group></article-meta></front><body><sec id="Sec1"><title>Background</title><p>Massively parallel / next generation sequencing (NGS) has become a central tool for many projects related to the life sciences, including fields such as molecular biology, evolutionary biology, metagenomics and oncology. These novel technologies have brought tremendous depth to our understanding of epigenetics and are becoming widely used in many experimental setups. Recent improvements in sequencing technologies have made it commonplace to obtain 20 to 40 gigabits of data from a single experiment [<xref ref-type="bibr" rid="CR1">1</xref>] while the cost per mega base has dropped by half nearly every six months since 2008 [<xref ref-type="bibr" rid="CR2">2</xref>, <xref ref-type="bibr" rid="CR3">3</xref>]. The explosion of NGS data in the life sciences has lead to surpass the petabase barrier [<xref ref-type="bibr" rid="CR4">4</xref>]. In addition to the massive amount of data generated in the genomics era, the empiric observation that NGS analysis constitutes one of the major bottlenecks in modern genomics projects has brought new challenges including the urgent need to create efficient and reproducible analysis pipelines accessible to both biologists and bioinformaticians.</p><p>Biologists have embraced NGS technologies with great enthusiasm, mainly because of the opportunities and promises they provide. However, although NGS allows rapid assessment of genome wide changes, paradoxically, the computational power and complexity required for its analysis has significantly hindered the overall turnaround time for wet-lab scientists, many of whom rely on overwhelmed bioinformatics core facilities. A common effort has thus been established to support the post-genomic era including the development of important interfaces such as genome browsers (UCSC [<xref ref-type="bibr" rid="CR5">5</xref>&#x02013;<xref ref-type="bibr" rid="CR7">7</xref>], Ensembl [<xref ref-type="bibr" rid="CR8">8</xref>]), annotation databases (ENCODE [<xref ref-type="bibr" rid="CR9">9</xref>], modENCODE [<xref ref-type="bibr" rid="CR10">10</xref>]) and tools to manipulate big data files (BEDTools [<xref ref-type="bibr" rid="CR11">11</xref>], SAMtools [<xref ref-type="bibr" rid="CR12">12</xref>]). Moreover, many scientists have contributed to the development of Galaxy, an open source, web-based platform that provides various tools for NGS data analysis [<xref ref-type="bibr" rid="CR13">13</xref>, <xref ref-type="bibr" rid="CR14">14</xref>]. Finally, the R community is providing increased support to the field of bioinformatics by developing and providing a plethora of open source packages as part of the Bioconductor consortium [<xref ref-type="bibr" rid="CR15">15</xref>].</p><p>The development of publically available tools has undoubtedly facilitated the analysis of NGS data. However, several loopholes still remain. For example, irrespective of how user-friendly these tools might be, they are often daunting for scientists that have little to no programming experience. This particular segment is often brought to the dilemma of choosing between investing the effort to learn the computational skills necessary to analyze their own data or waiting for it to be analyzed by computational cores. Empirically, the majority of the decisions converge to the later. In the meantime, scientists still heavily rely on the ability to visualize their data to steer their projects. We thus feel that the community would strongly benefit from easy-to-use tools that do not require programming skills. The reason such applications have never been implemented likely stems from the disparity of each individual project and the need to apply specific parameters to each of them on a case-by-case scenario. Nevertheless, there is a strong demand for tools to rapidly assess whether the technical aspect of an experiment succeeded (antibody specificity, conditions, sequencing depth, etc), even though the tradeoff of using default parameters might well introduces some bias and imperfections in the analysis.</p><p>Another loophole in NGS analysis is seen with more advanced users. Indeed, many computational biologists, who strongly depend on automation for the majority of their work, continue to manually manipulate files (renaming, filing, copying, etc). This apparent dichotomy can be explained by the lack of tools to support vertical integration of NGS analysis&#x000a0; while managing their interdependencies. For example, the vast majority of tools that support singular repetitive tasks that can be run in parallel (mapping, filtering, etc.), rarely provide an easy solution for the integration of these tasks into a complicated multi-dimensional workflow. As such, few softwares allow users to efficiently run custom made pipelines on the same server on which the data is stored long term. For example, Galaxy, the most widely used open-source platform for data analysis has a powerful and intuitive web-based front-end interface. Nevertheless, users are required to upload files and are often limited by various regulations including maximum job submissions, wall time and storage space. Other tools such as HTStation [<xref ref-type="bibr" rid="CR16">16</xref>] require scientists to continuously follow the job statuses and manually manipulate files and keys between different steps. These iterative and error-prone processes, which, <italic>de facto,</italic> cannot be referred to as pipelines, are cumbersome and time-consuming.</p><p>To address some of the above-discussed issues, we present NEAT, a framework developed to help manage ChIPseq and RNAseq pipelines in a robust, reproducible and user-friendly manner. NEAT offers several automated modules (unzip, rename, QC, chiprx, map, filter, peakcalling, creation of wig files, etc) that can be run through double-clickable icons from any desktop or laptop, an interface that not only facilitates the analysis of NGS data, but that makes it accessible to non-expert users. Furthermore, NEAT includes downstream applications that allow users to effortlessly explore NGS data using a graphical user interface (GUI) display. In summary, we believe that NEAT will help biologists as well as established bioinformaticians create, manage and analyze complex NGS pipelines, as well as assess NGS data within 24&#x000a0;h of the sequencing run completion through a simple GUI.</p></sec><sec id="Sec2"><title>Implementation</title><p>We have created an NGS framework under the UNIX operating system called NEAT that can easily be run either through the command line or through a graphical user interface (GUI). NEAT is a modular, reliable and user-friendly framework that allows users to build both ChIPseq and RNAseq pipeline using plain words (&#x02018;<italic>map</italic>&#x02019; will map and so on). NEAT is completely automated and supports users in the analysis of NGS data by managing all jobs and their dependencies from a single, centralized file. NEAT is designed to be run by scientists with no programming experience and as such, pipelines can be build and managed using double-clickable executables on a simple laptop. On the other hand, its modular architecture allows advanced users to easily customize NEAT to their own needs. In additional, NEAT can be implemented in the vast majority of institutions (compatible with LSF and PBS) regardless of rules and regulations as all cluster parameters including queuing priority, node allocation, number of CPUs and wall time can be parameterized from a single file.</p><p>After having installed NEAT using the &#x02018;<italic>Install.app</italic>&#x02019; module (Additional files <xref rid="MOESM1" ref-type="media">1</xref> and <xref rid="MOESM2" ref-type="media">2</xref>), the analysis consists of a 4-step process, each of which has a unique GUI: (1) create a new project; (2) run NEAT; (3) download data to local computer; (4) run additional analyses (Fig.&#x000a0;<xref rid="Fig1" ref-type="fig">1</xref> and Additional files <xref rid="MOESM1" ref-type="media">1</xref> and <xref rid="MOESM2" ref-type="media">2</xref>). Although all steps can be run either on a remote server or on a local computer, step (2) requires high computational power and we therefore suggest running it through the GUI, which will launch the pipeline on the remote high capacity cluster specified by the user. Sections (1), (3) and (4) can be run locally without the need for internet access, which is an advantage for users that are uncomfortable with cloud computing or when traveling.<fig id="Fig1"><label>Fig. 1</label><caption><p>NEAT architecture. NGS data can be analyzed using NEAT in less than a day. Users follow a logical 4-step process, including the creation of a new project, running the pipeline on a remote server or in the cloud, transferring the data to a local computer and proceeding to the analysis. <sup>*</sup>depicts modules that are restricted to ChIPseq experiments. The modules depicted reflect a non-exhaustive list. Left-hand figure represents a conceptual framework; Right hand icons represent the double-clickable executables that run the different processes</p></caption><graphic xlink:href="12859_2016_902_Fig1_HTML" id="MO1"/></fig></p><p>The four steps of the NEAT framework are described below. In addition, step-by-step tutorials can be found in the supplemental material (Additional files <xref rid="MOESM1" ref-type="media">1</xref> and <xref rid="MOESM2" ref-type="media">2</xref>). The tutorials allow users to follow through an entire NGS analysis using a provided test data set. The test datasets, which are either H3K4me3 ChIPseq&#x000a0;data or RNAseq data from mouse embryonic stem cells, have been truncated such that the entire analysis should take less than two hours. Running the test data will also ensure NEAT and its dependencies&#x000a0;(packages, scripts, etc) are properly installed before submitting large, memory-savvy analyses.</p><sec id="Sec3"><title>Step 1: Creating a NEAT project</title><p>The first step of the NEAT framework is to build a new project. This can be done through the &#x02018;<italic>New Project</italic>&#x02019; application (Fig.&#x000a0;<xref rid="Fig1" ref-type="fig">1</xref> and Additional files <xref rid="MOESM1" ref-type="media">1</xref> and <xref rid="MOESM2" ref-type="media">2</xref>), which will prompt users to enter some details including the directory the project will be created in and the name of the project. Once executed, the user will be asked to fill in the foremost important step of NEAT: the <italic>Targets.txt</italic> file.</p><p>The <italic>Targets.txt</italic> file is the most important piece of NEAT and users are expected to invest the time and effort to ensure all paths and parameters exist and are correctly set. It is worth noting that once set, most of these parameters will not change on a specific computer cluster (users from the same institute will use the same parameters). We therefore suggest that more advanced users modify the <italic>original Targets.txt</italic> template file (Additional files <xref rid="MOESM1" ref-type="media">1</xref> and <xref rid="MOESM2" ref-type="media">2</xref>), which is used&#x000a0;as template each time a new project is created. This will significantly ease the process of building new projects and will minimize errors due to inexistent files or wrong paths. For down stream analysis of NEAT projects (see step 4), several widely used database names can be found in the <italic>Species_specificities.txt</italic> file for reference (Additional files <xref rid="MOESM1" ref-type="media">1</xref> and <xref rid="MOESM2" ref-type="media">2</xref>).</p><p>While the upper portion of the <italic>Targets.txt</italic> file sets up the backbone of NEAT, the bottom portion contains the details of the experimental setup including the names of the compressed fastq files (usually provided by the sequencing core), the names that the users would like to give to the samples, their relationship (replicate, sample to input, etc) and antibody specificities. For paired-end runs, it is important to note that the sample name of the reverse-reads needs to be consistent with the forward-reads sample name, followed by &#x02018;_R2&#x02019; (underscore R2). For example, if the &#x02018;<italic>FileName</italic>&#x02019; of the forward reads is &#x02018;PSa36-1_Dox_K4me3&#x02019;, the corresponding reverse read file should be named &#x02018;PSa36-1_Dox_K4me3_R2&#x02019;. In addition, the reverse-reads file information should be set below the <italic>&#x02018;PE corresponding samples&#x02019;</italic> mark&#x000a0;at the bottom of the <italic>Targets.txt</italic> file instead of the <italic>&#x02018;SAMPLES INFO&#x02019;</italic> section (Fig.&#x000a0;<xref rid="Fig2" ref-type="fig">2</xref> and Additional files <xref rid="MOESM1" ref-type="media">1</xref> and <xref rid="MOESM2" ref-type="media">2</xref>).<fig id="Fig2"><label>Fig. 2</label><caption><p>The Target.txt file. NEAT is centralized around a single text file (<italic>Targets.txt</italic>) containing all required information including sample names, inputs, their relationships, virtual paths to reference genomes, parameters, alignment and peak calling algorithms. Many of the settings are either automatically filled in when a new project is created or need to be filled in only once. The color code helps understand which parameters are specific to the cluster (green); the user (orange); the experiment (red and blue) or different parameters (grey)</p></caption><graphic xlink:href="12859_2016_902_Fig2_HTML" id="MO2"/></fig></p><p>Finally, in addition to containing the data processed by the pipeline, most importantly, the <italic>Targets.txt</italic> file contains the building blocks of the pipeline. These blocks are specified under the &#x02018;<italic>Steps_to_execute_pipe</italic>&#x02019; and can be written in plain English words, e.g. &#x02018;unzip&#x02019;, &#x02018;map&#x02019;, &#x02018;filter&#x02019; etc. The different default building blocks are described below.&#x000a0;As NEAT uses exact word matching, users that do not want to run a given block are free to delete it or rename it (for example as 'chiprs_NO').</p><sec id="Sec4"><title>Unzip</title><p>The &#x02018;<italic>unzip</italic>&#x02019; module will unzip, rename and store fatsq files in a newly created folder within the project folder. Although this strategy can seem cumbersome for space issues, it allows systematic storage of backups without manipulating the original compressed file, which helps organize and keep track of the sequencing runs.</p><p>Sequencing cores use different compression formats. For this reason, users can specify the file extension and the unzip command in the <italic>AdvancedSettings.txt</italic> file (Additional files <xref rid="MOESM1" ref-type="media">1</xref> and <xref rid="MOESM2" ref-type="media">2</xref>). This module will unzip the compressed files found in the directory specified in the &#x02018;<italic>Remote_path_to_orifastq_gz</italic>&#x02019; parameter and which names are found in the &#x02018;<italic>OriFileName</italic>&#x02019; column of the <italic>Targets.txt</italic> file, and will rename them according to the users setup in the &#x02018;<italic>FileName</italic>&#x02019;. All files will be stored in the newly created &#x02018;<italic>fatsq</italic>&#x02019; folder (Additional file <xref rid="MOESM3" ref-type="media">3</xref>).</p></sec><sec id="Sec5"><title>QC</title><p>The &#x02018;<italic>QC</italic>&#x02019; module uses the R systemPipeR package (Girke T. (2014) systemPipeR: NGS workflow and report generation environment. URL <ext-link ext-link-type="uri" xlink:href="https://github.com/tgirke/systemPipeR">https://github.com/tgirke/systemPipeR</ext-link>) to provide a variety of high quality control outputs including per cycle quality box plots, base proportion, relative k-mer diversity, length and occurrence distribution of reads, number of reads above quality cutoffs and mean quality distribution. The &#x02018;<italic>QC</italic>&#x02019; building block, together with the &#x02018;<italic>GRanges</italic>&#x02019; modules (see below) are the rare exception that require the installation of external R packages. Additional information on package installation can be found in the tutorials (Additional files <xref rid="MOESM4" ref-type="media">4</xref>, <xref rid="MOESM1" ref-type="media">1</xref> and <xref rid="MOESM2" ref-type="media">2</xref>).</p></sec><sec id="Sec6"><title>ChIPrx</title><p>ChIPrx [<xref ref-type="bibr" rid="CR17">17</xref>] is a cutting edge normalization method for ChIPseq that performs genome-wide quantitative comparisons using a defined quantity of an exogenous epigenome, e.g. a spike-in control. The detailed algorithm of ChIP-RX has been implemented as previously published [<xref ref-type="bibr" rid="CR17">17</xref>]. For the sake of consistency, the same mapping and filtering parameters will be used for both the alignment of the standard and the spike-in epigenome. If no spike-in controls are used, all ChIP-RX parameters can be dashed (&#x02018;-&#x02019;).</p></sec><sec id="Sec7"><title>Map</title><p>The &#x02018;<italic>map</italic>&#x02019; module maps reads using either bwa [<xref ref-type="bibr" rid="CR18">18</xref>] or bowtie [<xref ref-type="bibr" rid="CR19">19</xref>]. For RNAseq projects, the splice-aware, bowtie-based Tophat [<xref ref-type="bibr" rid="CR20">20</xref>] algorithm is preferred. The standard parameters for either algorithm can be modified in the <italic>AdvancedSettings.txt</italic> file, including maximum number of gaps, gap extension, maximum edit distance, number of threads, mismatch and gap penalty, etc. Additional mapping algorithms can easily be implemented by advanced users (Additional files <xref rid="MOESM1" ref-type="media">1</xref> and <xref rid="MOESM2" ref-type="media">2</xref>).</p></sec><sec id="Sec8"><title>Filter</title><p>The &#x02018;<italic>filter</italic>&#x02019; module allows the user to specify filtering parameters (<italic>AdvancedSettings.txt</italic>) including how to manage duplicate reads, minimum and maximum size of fragments, etc. This module uses the samtools [<xref ref-type="bibr" rid="CR12">12</xref>, <xref ref-type="bibr" rid="CR21">21</xref>] <italic>view</italic>, <italic>sort</italic>, <italic>rmdup</italic> and <italic>index</italic> functions.</p></sec><sec id="Sec9"><title>Peakcalling</title><p>The &#x02018;<italic>peakcalling</italic>&#x02019; module specifies the algorithm used to call peaks. NEAT has two well-established peak calling methods built-in by default, including MACS (PeakCaller_MACS.R) [<xref ref-type="bibr" rid="CR22">22</xref>] and SPP (PeakCaller_SPP.R) [<xref ref-type="bibr" rid="CR23">23</xref>]. It is worth noting that given that NEAT is open source and very versatile, it is easy for advanced users to implement their own peak calling algorithm as an R code (Additional files <xref rid="MOESM1" ref-type="media">1</xref> and <xref rid="MOESM2" ref-type="media">2</xref>).</p></sec><sec id="Sec10"><title>Cleanfiles</title><p>Given different mapping algorithms have distinct outputs, the &#x02018;<italic>cleanfiles</italic>&#x02019; module helps reorganize and store the different .bam and .bai files before proceeding to downstream analysis. This allows advanced users to implement their own mapping algorithms while still taking advantage of NEAT&#x02019;s EDA modules.</p></sec><sec id="Sec11"><title>GRanges</title><p>The &#x02018;<italic>GRanges&#x02019;</italic> module creates significantly smaller <italic>GRanges</italic> objects (compared to bam files), which are necessary for downstream analysis including identification of differentially regulated genes (RNAseq) and metagenomic analyses (ChIPseq). This eases and increases the efficiency of file transfer, file sharing and consolidation of projects. In addition, the &#x02018;<italic>GRanges</italic>&#x02019; module creates small size wiggle files (.wig files). Wiggle files can&#x000a0;be loaded and visualized in various genome browsers including IGV [<xref ref-type="bibr" rid="CR24">24</xref>, <xref ref-type="bibr" rid="CR25">25</xref>]. The compression of the file is driven in part by the binning of the data across the genome. The bin size, which is in base pair units, can be customized in the <italic>AdvancedSettings.txt</italic> file.</p></sec></sec><sec id="Sec12"><title>Step 2: Running NEAT</title><p>After building a pipeline using the easy one-word method in the &#x02018;<italic>Steps_to_execute_pipe</italic>&#x02019; line of the <italic>Targets.txt</italic> file, non-expert users can run the workflow using the applescript double-clickable executable (Fig.&#x000a0;<xref rid="Fig1" ref-type="fig">1</xref> and Additional files <xref rid="MOESM1" ref-type="media">1</xref> and <xref rid="MOESM2" ref-type="media">2</xref>). More advanced users can run it through the command line (Fig.&#x000a0;<xref rid="Fig1" ref-type="fig">1</xref> and Additional files <xref rid="MOESM1" ref-type="media">1</xref> and <xref rid="MOESM2" ref-type="media">2</xref>). The executable will prompt users to identify which project they want to run before opening a terminal and asking them (twice) to enter their ssh password. This will allow NEAT to access and run the pipeline on the computationally efficient remote cluster. Once entered, NEAT automatically manages job submission, queuing and dependencies. A detailed explanation on how to follow the pipeline and a step-by-step debugging support can be found in the tutorials (Additional files <xref rid="MOESM1" ref-type="media">1</xref>, <xref rid="MOESM2" ref-type="media">2</xref> and <xref rid="MOESM5" ref-type="media">5</xref>). Moreover, users can decide to setup automatic emailing when the pipeline has completed. As a point of reference, running an exhaustive pipeline (unzip&#x02009;+&#x02009;QC&#x02009;+&#x02009;chiprx&#x02009;+&#x02009;map&#x02009;+&#x02009;filter&#x02009;+&#x02009;peakcalling&#x02009;+&#x02009;cleanfiles&#x02009;+&#x02009;granges) on data comprising 200&#x02013;400 million reads should not take more than 10 to 15&#x000a0;h. The project architecture of a completed NEAT project on the remote server including the timing and location of files and folders can be found in Additional file <xref rid="MOESM3" ref-type="media">3</xref>.</p></sec><sec id="Sec13"><title>Step 3: Download a NEAT project from a remote server to a local computer</title><p>The core component of NEAT (step 2), which is the pipeline <italic>per se</italic>, is computationally demanding and is thus preferentially ran on a remote cluster. However, upon completion of the pipeline, users may prefer to view and analyze their data locally, e.g. on a desktop or a laptop. As mentioned above, NEAT can be used to create GRanges and wiggle files, which main advantage are their relatively small size compared to bam files (wig&#x02009;~&#x02009;4&#x02013;6&#x000a0;Mb; GRanges&#x02009;~&#x02009;40&#x02013;60&#x000a0;Mb; bam&#x02009;~&#x02009;4&#x02013;6 Gb). In addition, these files can easily and rapidly be shared by email or in batch using standard flash drives.</p><p>To download a NEAT project from a remote server to a local computer, users can run the &#x02018;<italic>Transfer.app</italic>&#x02019; applescript double clickable executable (Fig.&#x000a0;<xref rid="Fig1" ref-type="fig">1</xref> and Additional files <xref rid="MOESM1" ref-type="media">1</xref> and <xref rid="MOESM2" ref-type="media">2</xref>), which will automatically open a terminal window and start the process. Users will be prompted to locate the NEAT directory and the NEAT project. The &#x02018;<italic>Transfer.app</italic>&#x02019; will use all the information found in the corresponding <italic>Targets.txt</italic> file to download the NEAT project from the remote server to the local computer. Users should be attentive as they will be asked to enter the corresponding ssh password several times. Downloading an entire project should not take more than a few minutes.</p></sec><sec id="Sec14"><title>Step 4: Exploratory data analysis using NEAT</title><p>Empirically, data visualization is an important milestone for wet-lab scientists. This step is often critical for deciding the direction to take for further experiments and computational biologists often underestimate its importance. As an effort to improve the turn around time of NGS datasets, NEAT supports users in the creation of wig files (see step 2) that can be visualized using various genome browsers including IGV [<xref ref-type="bibr" rid="CR24">24</xref>, <xref ref-type="bibr" rid="CR25">25</xref>].</p><p>Section 4 of NEAT also contains tools for exploratory data analysis (EDA), which supports the creation of human-readable files including pdf graphs and count tables, which can be opened and analyzed in softwares such as excel. The tools that create these files require relatively small computational power, which allows users to experiment using a variety of different parameters ranging from cutoff values to DEG stringencies. The default EDA tools consist of [ChIPseq]: metagenomic analysis (feature-centric alignment of ChIPseq enrichments), count tables and peak overlap (if SPP was used as peak calling algorithm); [RNAseq] smear plots, DEG analysis, consolidated count tables, RPKM, Venn diagrams of gene overlap and GOrilla-compatible [<xref ref-type="bibr" rid="CR26">26</xref>, <xref ref-type="bibr" rid="CR27">27</xref>] differentially expressed genes lists&#x000a0;(Fig. <xref rid="Fig3" ref-type="fig">3</xref>).<fig id="Fig3"><label>Fig. 3</label><caption><p>Output examples. NEAT outputs many files and graphs, some of which are depicted as examples. <bold>a</bold> Quality control of fastq files. <bold>b</bold> Metagene analysis (ChIPseq) of the test data around all TSSs. <bold>c</bold> Venn diagrams of peak overlaps. <bold>d</bold> Scatterplots for sample-to-sample comparison (RNAseq). <bold>e</bold> DEG smear plots with DEG highlighted and annotated. Above and below are two examples of DEG picked up by the pipeline</p></caption><graphic xlink:href="12859_2016_902_Fig3_HTML" id="MO3"/></fig></p><p>It is worth noting that the metagenomic analysis in the ChIPseq module can be easily customizable. This tool allows users to visualize chromatin immunoprecipitation enrichments of various samples over specific features (contained in the <italic>MartObject</italic> folder; Additional files <xref rid="MOESM1" ref-type="media">1</xref> and <xref rid="MOESM2" ref-type="media">2</xref>). For example, using the test dataset, users can explore enrichment of an epigenetic mark (K4me3) around all transcriptional start sites (TSSs) of the mouse genome. However, such analyses are not constrained to any particular region, nor to regions of similar length. By creating a simple bed file, users can assess enrichments over their preferred regions of interest. For example, users can visualize enrichments over all transcripts and/or enhancers. In such case, the length will be normalized throughout all regions. Any bed-formatted file can be used for the metagenomic module.</p></sec><sec id="Sec15"><title>Customizing NEAT modules</title><p>NEAT was developed as a user-friendly, intuitive and versatile tool. As such, care has been taken to allow users the ability to customize the pipeline for their own needs. This includes easy customizable mapping algorithms, mapping and filtering parameters, peak calling algorithms and metagenenomic features (TSS, transcripts, personal regions of interest, etc). In addition, more advanced users can efficiently develop novel modules as the code architecture has been written in a robust, logical, highly redundant and well-annotated manner. To add a new module, advanced users can simply duplicate an existing module and integrate their custom task into the script, usually consisting of a single line of code. The NEAT framework fully automates recurrent tasks such as batch job submissions, job dependencies, job queuing, error management, filing, etc., which greatly facilitates the creation of custom modules. Full support and step-by-step explanations to add customized modules can be found in the tutorials (Additional files <xref rid="MOESM1" ref-type="media">1</xref>, <xref rid="MOESM2" ref-type="media">2</xref>, <xref rid="MOESM5" ref-type="media">5</xref>, <xref rid="MOESM6" ref-type="media">6</xref> and <xref rid="MOESM7" ref-type="media">7</xref>).</p></sec></sec><sec id="Sec19"><title>Results</title><p>As this work presents a 'pipeline', tangible results are in the form of outputs (Fig. <xref rid="Fig3" ref-type="fig">3</xref>). Supporting arguments are in-line.</p></sec><sec id="Sec16"><title>Conclusion</title><p>Technological revolutions often drive and precede biological revolutions. The <italic>omics</italic> field has not been immune to this general rule. Such paradigm shifts are often followed by a period of great adaptation. For massively parallel sequencing, developing curriculums to educate scientists with the proper skill sets will require some time. Meanwhile, the life science community is in desperate need for tools to support scientists that have been trained prior to the sequencing of the human genome. Although NEAT is not intended to replace thorough bioinformatics analysis <italic>per se</italic>, we believe that it provides helpful tools to accompany scientists in the analysis of NGS data and allow them to rapidly apply standard exploratory data analysis methods to assess the quality of their experiments within 24&#x000a0;h of the sequencing run completion. Specifically, we strongly believe that providing wet-lab scientists with simple tools to facilitate rapid data visualization, which is a significant bottleneck for many users, will greatly benefit the community and will allow one to better plan and foresee biological experiments without the need to wait for thorough bioinformatics analysis.</p><p>NEAT was developed for a wide audience including scientists with no <italic>a</italic> priori programming knowledge. To this end, although NEAT should be self explanatory (double-clickable application based), it comes with step-by-step tutorials as well as two test datasets that will enable novice users to follow through and reproduce entire ChIPseq and RNAseq workflows. In addition, given the wide diversity of interests in the life sciences, NEAT has been developed to be versatile, easily customizable and applicable to a wide variety of different genomes. Finally, the modular structure of NEAT allows advanced users and computational core facilities to easily add and modify tasks, customize settings and comply with internal rules and regulations with minimal footprint to their existing server architecture. Taken together, we believe NEAT will be of general interest and has the potential to be widely adopted for its versatility and ease of use.</p><p>NEAT is an open-source software under an MIT license. NEAT, including tutorials and test data, is publicly available on GitHub (<ext-link ext-link-type="uri" xlink:href="https://github.com/pschorderet/NEAT">https://github.com/pschorderet/NEAT</ext-link>).</p></sec><sec id="Sec17"><title>Availability and requirements</title><p>Project home page: <ext-link ext-link-type="uri" xlink:href="https://github.com/pschorderet/NEAT">https://github.com/pschorderet/NEAT</ext-link></p><p>Operating system: Mac OSx</p><p>Programming language: Perl, R, Applescript</p><p>License: NEAT is an open-source software under an MIT license</p></sec></body><back><app-group><app id="App1"><sec id="Sec18"><title>Additional files</title><p><media position="anchor" xlink:href="12859_2016_902_MOESM1_ESM.pdf" id="MOESM1"><label>Additional file 1:</label><caption><p>
<bold>Quick guide ChIPseq.</bold> Step-by-step guide for the analysis of ChIPseq datasets, including the provided test dataset. (PDF 834&#x000a0;kb)</p></caption></media><media position="anchor" xlink:href="12859_2016_902_MOESM2_ESM.pdf" id="MOESM2"><label>Additional file 2:</label><caption><p>
<bold>Quick guide RNAseq.</bold> Step-by-step guide for the analysis of RNAseq datasets, including the provided test dataset. (PDF 843&#x000a0;kb)</p></caption></media><media position="anchor" xlink:href="12859_2016_902_MOESM3_ESM.pdf" id="MOESM3"><label>Additional file 3:</label><caption><p>
<bold>Code architecture.</bold> Architecture of the provided NEAT ChIPseq project after completion of all steps on the remote server. The color code highlights which files are created during which step as well as where they are stored. (PDF 34&#x000a0;kb)</p></caption></media><media position="anchor" xlink:href="12859_2016_902_MOESM4_ESM.pdf" id="MOESM4"><label>Additional file 4:</label><caption><p>
<bold>QC report.</bold> QC report generated by NEAT when running the ChIP- and RNAseq test data set. (PDF 889&#x000a0;kb)</p></caption></media><media position="anchor" xlink:href="12859_2016_902_MOESM5_ESM.pdf" id="MOESM5"><label>Additional file 5:</label><caption><p>
<bold>Quick guide to add custom modules.</bold> Step-by-step guide for the addition of custom modules. (PDF 360&#x000a0;kb)</p></caption></media><media position="anchor" xlink:href="12859_2016_902_MOESM6_ESM.pdf" id="MOESM6"><label>Additional file 6:</label><caption><p>
<bold>Code architecture schematic.</bold> Example of a module&#x02019;s architecture in NEAT. The left part schematically represents the different steps that constitute each module. The right part represents some example code and how it is imbricated. The example reflects NEAT run on a torque manager system (qsub/PBS) though NEAT can be run on other systems as well including LSF clsuters (bsub). (PDF 960&#x000a0;kb)</p></caption></media><media position="anchor" xlink:href="12859_2016_902_MOESM7_ESM.pdf" id="MOESM7"><label>Additional file 7:</label><caption><p>
<bold>Code architecture.</bold> Code architecture for the additional of custom modules. Custom code should replace the red font (make sure the loop is correct depending on whether it is a ChIPseq or RNAseq module). The module backbone as well as the submission procedures are robust, highly repetitive and will automatically manage job submission and queuing. (PDF 458&#x000a0;kb)</p></caption></media></p></sec></app></app-group><fn-group><fn><p><bold>Competing interests</bold></p><p>The author declares no competing interests.</p></fn></fn-group><ack><p>PS is supported by an Advanced Swiss National Foundation Fellowship (P300P3_158516) and is supported in part through the National Institute of General Medical Sciences (US) grant R37 GM48405-21 awarded to Robert E Kingston. I would like to acknowledge the Kingston Lab members for stimulating discussions, feedback and testing; particularly Alan Rodrigues, Sharon Marr, Aaron Plys, Ozlem Yildirim, Ruslan Sadreyev and Bob Kingston for critical reading during the preparation of the manuscript.</p></ack><ref-list id="Bib1"><title>References</title><ref id="CR1"><label>1.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hodkinson</surname><given-names>BP</given-names></name><name><surname>Grice</surname><given-names>EA</given-names></name></person-group><article-title>Next-generation sequencing: a review of technologies and tools for wound microbiome research</article-title><source>Adv Wound Care (New Rochelle)</source><year>2015</year><volume>4</volume><fpage>50</fpage><lpage>8</lpage><pub-id pub-id-type="doi">10.1089/wound.2014.0542</pub-id><pub-id pub-id-type="pmid">25566414</pub-id></element-citation></ref><ref id="CR2"><label>2.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Sboner</surname><given-names>A</given-names></name><name><surname>Mu</surname><given-names>XJ</given-names></name><name><surname>Greenbaum</surname><given-names>D</given-names></name><name><surname>Auerbach</surname><given-names>RK</given-names></name><name><surname>Gerstein</surname><given-names>MB</given-names></name></person-group><article-title>The real cost of sequencing: higher than you think!</article-title><source>Genome Biol</source><year>2011</year><volume>12</volume><fpage>125</fpage><pub-id pub-id-type="doi">10.1186/gb-2011-12-8-125</pub-id><?supplied-pmid 21867570?><pub-id pub-id-type="pmid">21867570</pub-id></element-citation></ref><ref id="CR3"><label>3.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Stein</surname><given-names>LD</given-names></name></person-group><article-title>The case for cloud computing in genome informatics</article-title><source>Genome Biol</source><year>2010</year><volume>11</volume><fpage>207</fpage><pub-id pub-id-type="doi">10.1186/gb-2010-11-5-207</pub-id><?supplied-pmid 20441614?><pub-id pub-id-type="pmid">20441614</pub-id></element-citation></ref><ref id="CR4"><label>4.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kodama</surname><given-names>Y</given-names></name><name><surname>Shumway</surname><given-names>M</given-names></name><name><surname>Leinonen</surname><given-names>R</given-names></name><collab>International Nucleotide Sequence Database C</collab></person-group><article-title>The Sequence Read Archive: explosive growth of sequencing data</article-title><source>Nucleic Acids Res</source><year>2012</year><volume>40</volume><fpage>D54</fpage><lpage>6</lpage><pub-id pub-id-type="doi">10.1093/nar/gkr854</pub-id><?supplied-pmid 22009675?><pub-id pub-id-type="pmid">22009675</pub-id></element-citation></ref><ref id="CR5"><label>5.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kent</surname><given-names>WJ</given-names></name><name><surname>Sugnet</surname><given-names>CW</given-names></name><name><surname>Furey</surname><given-names>TS</given-names></name><name><surname>Roskin</surname><given-names>KM</given-names></name><name><surname>Pringle</surname><given-names>TH</given-names></name><name><surname>Zahler</surname><given-names>AM</given-names></name><etal/></person-group><article-title>The human genome browser at UCSC</article-title><source>Genome Res</source><year>2002</year><volume>12</volume><fpage>996</fpage><lpage>1006</lpage><pub-id pub-id-type="doi">10.1101/gr.229102.ArticlepublishedonlinebeforeprintinMay2002</pub-id><?supplied-pmid 12045153?><pub-id pub-id-type="pmid">12045153</pub-id></element-citation></ref><ref id="CR6"><label>6.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kuhn</surname><given-names>RM</given-names></name><name><surname>Haussler</surname><given-names>D</given-names></name><name><surname>Kent</surname><given-names>WJ</given-names></name></person-group><article-title>The UCSC genome browser and associated tools</article-title><source>Brief Bioinform</source><year>2013</year><volume>14</volume><fpage>144</fpage><lpage>61</lpage><pub-id pub-id-type="doi">10.1093/bib/bbs038</pub-id><?supplied-pmid 22908213?><pub-id pub-id-type="pmid">22908213</pub-id></element-citation></ref><ref id="CR7"><label>7.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Raney</surname><given-names>BJ</given-names></name><name><surname>Cline</surname><given-names>MS</given-names></name><name><surname>Rosenbloom</surname><given-names>KR</given-names></name><name><surname>Dreszer</surname><given-names>TR</given-names></name><name><surname>Learned</surname><given-names>K</given-names></name><name><surname>Barber</surname><given-names>GP</given-names></name><etal/></person-group><article-title>ENCODE whole-genome data in the UCSC genome browser (2011 update)</article-title><source>Nucleic Acids Res</source><year>2011</year><volume>39</volume><fpage>D871</fpage><lpage>5</lpage><pub-id pub-id-type="doi">10.1093/nar/gkq1017</pub-id><?supplied-pmid 21037257?><pub-id pub-id-type="pmid">21037257</pub-id></element-citation></ref><ref id="CR8"><label>8.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Flicek</surname><given-names>P</given-names></name><name><surname>Ahmed</surname><given-names>I</given-names></name><name><surname>Amode</surname><given-names>MR</given-names></name><name><surname>Barrell</surname><given-names>D</given-names></name><name><surname>Beal</surname><given-names>K</given-names></name><name><surname>Brent</surname><given-names>S</given-names></name><etal/></person-group><article-title>Ensembl 2013</article-title><source>Nucleic Acids Res</source><year>2013</year><volume>41</volume><fpage>D48</fpage><lpage>55</lpage><pub-id pub-id-type="doi">10.1093/nar/gks1236</pub-id><?supplied-pmid 23203987?><pub-id pub-id-type="pmid">23203987</pub-id></element-citation></ref><ref id="CR9"><label>9.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>de Souza</surname><given-names>N</given-names></name></person-group><article-title>The ENCODE project</article-title><source>Nat Methods</source><year>2012</year><volume>9</volume><fpage>1046</fpage><pub-id pub-id-type="doi">10.1038/nmeth.2238</pub-id><?supplied-pmid 23281567?><pub-id pub-id-type="pmid">23281567</pub-id></element-citation></ref><ref id="CR10"><label>10.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Celniker</surname><given-names>SE</given-names></name><name><surname>Dillon</surname><given-names>LA</given-names></name><name><surname>Gerstein</surname><given-names>MB</given-names></name><name><surname>Gunsalus</surname><given-names>KC</given-names></name><name><surname>Henikoff</surname><given-names>S</given-names></name><name><surname>Karpen</surname><given-names>GH</given-names></name><etal/></person-group><article-title>Unlocking the secrets of the genome</article-title><source>Nature</source><year>2009</year><volume>459</volume><fpage>927</fpage><lpage>30</lpage><pub-id pub-id-type="doi">10.1038/459927a</pub-id><?supplied-pmid 19536255?><pub-id pub-id-type="pmid">19536255</pub-id></element-citation></ref><ref id="CR11"><label>11.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Quinlan</surname><given-names>AR</given-names></name><name><surname>Hall</surname><given-names>IM</given-names></name></person-group><article-title>BEDTools: a flexible suite of utilities for comparing genomic features</article-title><source>Bioinformatics</source><year>2010</year><volume>26</volume><fpage>841</fpage><lpage>2</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/btq033</pub-id><?supplied-pmid 20110278?><pub-id pub-id-type="pmid">20110278</pub-id></element-citation></ref><ref id="CR12"><label>12.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Li</surname><given-names>H</given-names></name><name><surname>Handsaker</surname><given-names>B</given-names></name><name><surname>Wysoker</surname><given-names>A</given-names></name><name><surname>Fennell</surname><given-names>T</given-names></name><name><surname>Ruan</surname><given-names>J</given-names></name><name><surname>Homer</surname><given-names>N</given-names></name><etal/></person-group><article-title>The Sequence Alignment/Map format and SAMtools</article-title><source>Bioinformatics</source><year>2009</year><volume>25</volume><fpage>2078</fpage><lpage>9</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/btp352</pub-id><?supplied-pmid 19505943?><pub-id pub-id-type="pmid">19505943</pub-id></element-citation></ref><ref id="CR13"><label>13.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Goecks</surname><given-names>J</given-names></name><name><surname>Nekrutenko</surname><given-names>A</given-names></name><name><surname>Taylor</surname><given-names>J</given-names></name><name><surname>Galaxy</surname><given-names>T</given-names></name></person-group><article-title>Galaxy: a comprehensive approach for supporting accessible, reproducible, and transparent computational research in the life sciences</article-title><source>Genome Biol</source><year>2010</year><volume>11</volume><fpage>R86</fpage><pub-id pub-id-type="doi">10.1186/gb-2010-11-8-r86</pub-id><?supplied-pmid 20738864?><pub-id pub-id-type="pmid">20738864</pub-id></element-citation></ref><ref id="CR14"><label>14.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Giardine</surname><given-names>B</given-names></name><name><surname>Riemer</surname><given-names>C</given-names></name><name><surname>Hardison</surname><given-names>RC</given-names></name><name><surname>Burhans</surname><given-names>R</given-names></name><name><surname>Elnitski</surname><given-names>L</given-names></name><name><surname>Shah</surname><given-names>P</given-names></name><etal/></person-group><article-title>Galaxy: a platform for interactive large-scale genome analysis</article-title><source>Genome Res</source><year>2005</year><volume>15</volume><fpage>1451</fpage><lpage>5</lpage><pub-id pub-id-type="doi">10.1101/gr.4086505</pub-id><?supplied-pmid 16169926?><pub-id pub-id-type="pmid">16169926</pub-id></element-citation></ref><ref id="CR15"><label>15.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gentleman</surname><given-names>RC</given-names></name><name><surname>Carey</surname><given-names>VJ</given-names></name><name><surname>Bates</surname><given-names>DM</given-names></name><name><surname>Bolstad</surname><given-names>B</given-names></name><name><surname>Dettling</surname><given-names>M</given-names></name><name><surname>Dudoit</surname><given-names>S</given-names></name><etal/></person-group><article-title>Bioconductor: open software development for computational biology and bioinformatics</article-title><source>Genome Biol</source><year>2004</year><volume>5</volume><fpage>R80</fpage><pub-id pub-id-type="doi">10.1186/gb-2004-5-10-r80</pub-id><?supplied-pmid 15461798?><pub-id pub-id-type="pmid">15461798</pub-id></element-citation></ref><ref id="CR16"><label>16.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>David</surname><given-names>FP</given-names></name><name><surname>Delafontaine</surname><given-names>J</given-names></name><name><surname>Carat</surname><given-names>S</given-names></name><name><surname>Ross</surname><given-names>FJ</given-names></name><name><surname>Lefebvre</surname><given-names>G</given-names></name><name><surname>Jarosz</surname><given-names>Y</given-names></name><etal/></person-group><article-title>HTSstation: a web application and open-access libraries for high-throughput sequencing data analysis</article-title><source>PLoS ONE</source><year>2014</year><volume>9</volume><fpage>e85879</fpage><pub-id pub-id-type="doi">10.1371/journal.pone.0085879</pub-id><?supplied-pmid 24475057?><pub-id pub-id-type="pmid">24475057</pub-id></element-citation></ref><ref id="CR17"><label>17.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Orlando</surname><given-names>DA</given-names></name><name><surname>Chen</surname><given-names>MW</given-names></name><name><surname>Brown</surname><given-names>VE</given-names></name><name><surname>Solanki</surname><given-names>S</given-names></name><name><surname>Choi</surname><given-names>YJ</given-names></name><name><surname>Olson</surname><given-names>ER</given-names></name><etal/></person-group><article-title>Quantitative ChIP-Seq normalization reveals global modulation of the epigenome</article-title><source>Cell Rep</source><year>2014</year><volume>9</volume><fpage>1163</fpage><lpage>70</lpage><pub-id pub-id-type="doi">10.1016/j.celrep.2014.10.018</pub-id><?supplied-pmid 25437568?><pub-id pub-id-type="pmid">25437568</pub-id></element-citation></ref><ref id="CR18"><label>18.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Li</surname><given-names>H</given-names></name><name><surname>Durbin</surname><given-names>R</given-names></name></person-group><article-title>Fast and accurate short read alignment with Burrows-Wheeler transform</article-title><source>Bioinformatics</source><year>2009</year><volume>25</volume><fpage>1754</fpage><lpage>60</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/btp324</pub-id><?supplied-pmid 19451168?><pub-id pub-id-type="pmid">19451168</pub-id></element-citation></ref><ref id="CR19"><label>19.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Langmead</surname><given-names>B</given-names></name><name><surname>Trapnell</surname><given-names>C</given-names></name><name><surname>Pop</surname><given-names>M</given-names></name><name><surname>Salzberg</surname><given-names>SL</given-names></name></person-group><article-title>Ultrafast and memory-efficient alignment of short DNA sequences to the human genome</article-title><source>Genome Biol</source><year>2009</year><volume>10</volume><fpage>R25</fpage><pub-id pub-id-type="doi">10.1186/gb-2009-10-3-r25</pub-id><?supplied-pmid 19261174?><pub-id pub-id-type="pmid">19261174</pub-id></element-citation></ref><ref id="CR20"><label>20.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Trapnell</surname><given-names>C</given-names></name><name><surname>Pachter</surname><given-names>L</given-names></name><name><surname>Salzberg</surname><given-names>SL</given-names></name></person-group><article-title>TopHat: discovering splice junctions with RNA-Seq</article-title><source>Bioinformatics</source><year>2009</year><volume>25</volume><fpage>1105</fpage><lpage>11</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/btp120</pub-id><?supplied-pmid 19289445?><pub-id pub-id-type="pmid">19289445</pub-id></element-citation></ref><ref id="CR21"><label>21.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Li</surname><given-names>H</given-names></name></person-group><article-title>A statistical framework for SNP calling, mutation discovery, association mapping and population genetical parameter estimation from sequencing data</article-title><source>Bioinformatics</source><year>2011</year><volume>27</volume><fpage>2987</fpage><lpage>93</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/btr509</pub-id><?supplied-pmid 21903627?><pub-id pub-id-type="pmid">21903627</pub-id></element-citation></ref><ref id="CR22"><label>22.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Zhang</surname><given-names>Y</given-names></name><name><surname>Liu</surname><given-names>T</given-names></name><name><surname>Meyer</surname><given-names>CA</given-names></name><name><surname>Eeckhoute</surname><given-names>J</given-names></name><name><surname>Johnson</surname><given-names>DS</given-names></name><name><surname>Bernstein</surname><given-names>BE</given-names></name><etal/></person-group><article-title>Model-based analysis of ChIP-Seq (MACS)</article-title><source>Genome Biol</source><year>2008</year><volume>9</volume><fpage>R137</fpage><pub-id pub-id-type="doi">10.1186/gb-2008-9-9-r137</pub-id><?supplied-pmid 18798982?><pub-id pub-id-type="pmid">18798982</pub-id></element-citation></ref><ref id="CR23"><label>23.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kharchenko</surname><given-names>PV</given-names></name><name><surname>Tolstorukov</surname><given-names>MY</given-names></name><name><surname>Park</surname><given-names>PJ</given-names></name></person-group><article-title>Design and analysis of ChIP-seq experiments for DNA-binding proteins</article-title><source>Nat Biotechnol</source><year>2008</year><volume>26</volume><fpage>1351</fpage><lpage>9</lpage><pub-id pub-id-type="doi">10.1038/nbt.1508</pub-id><?supplied-pmid 19029915?><pub-id pub-id-type="pmid">19029915</pub-id></element-citation></ref><ref id="CR24"><label>24.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Thorvaldsdottir</surname><given-names>H</given-names></name><name><surname>Robinson</surname><given-names>JT</given-names></name><name><surname>Mesirov</surname><given-names>JP</given-names></name></person-group><article-title>Integrative Genomics Viewer (IGV): high-performance genomics data visualization and exploration</article-title><source>Brief Bioinform</source><year>2013</year><volume>14</volume><fpage>178</fpage><lpage>92</lpage><pub-id pub-id-type="doi">10.1093/bib/bbs017</pub-id><?supplied-pmid 22517427?><pub-id pub-id-type="pmid">22517427</pub-id></element-citation></ref><ref id="CR25"><label>25.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Robinson</surname><given-names>JT</given-names></name><name><surname>Thorvaldsdottir</surname><given-names>H</given-names></name><name><surname>Winckler</surname><given-names>W</given-names></name><name><surname>Guttman</surname><given-names>M</given-names></name><name><surname>Lander</surname><given-names>ES</given-names></name><name><surname>Getz</surname><given-names>G</given-names></name><etal/></person-group><article-title>Integrative genomics viewer</article-title><source>Nat Biotechnol</source><year>2011</year><volume>29</volume><fpage>24</fpage><lpage>6</lpage><pub-id pub-id-type="doi">10.1038/nbt.1754</pub-id><?supplied-pmid 21221095?><pub-id pub-id-type="pmid">21221095</pub-id></element-citation></ref><ref id="CR26"><label>26.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Eden</surname><given-names>E</given-names></name><name><surname>Navon</surname><given-names>R</given-names></name><name><surname>Steinfeld</surname><given-names>I</given-names></name><name><surname>Lipson</surname><given-names>D</given-names></name><name><surname>Yakhini</surname><given-names>Z</given-names></name></person-group><article-title>GOrilla: a tool for discovery and visualization of enriched GO terms in ranked gene lists</article-title><source>BMC Bioinformatics</source><year>2009</year><volume>10</volume><fpage>48</fpage><pub-id pub-id-type="doi">10.1186/1471-2105-10-48</pub-id><?supplied-pmid 19192299?><pub-id pub-id-type="pmid">19192299</pub-id></element-citation></ref><ref id="CR27"><label>27.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Eden</surname><given-names>E</given-names></name><name><surname>Lipson</surname><given-names>D</given-names></name><name><surname>Yogev</surname><given-names>S</given-names></name><name><surname>Yakhini</surname><given-names>Z</given-names></name></person-group><article-title>Discovering motifs in ranked lists of DNA sequences</article-title><source>PLoS Comput Biol</source><year>2007</year><volume>3</volume><fpage>e39</fpage><pub-id pub-id-type="doi">10.1371/journal.pcbi.0030039</pub-id><?supplied-pmid 17381235?><pub-id pub-id-type="pmid">17381235</pub-id></element-citation></ref></ref-list></back></article>