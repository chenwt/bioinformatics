<!DOCTYPE article PUBLIC "-//NLM//DTD Journal Archiving and Interchange DTD v3.0 20080202//EN" "archivearticle3.dtd"> 
<article xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:mml="http://www.w3.org/1998/Math/MathML" article-type="research-article"><?DTDIdentifier.IdentifierValue article.dtd?><?DTDIdentifier.IdentifierType system?><?SourceDTD.DTDName article.dtd?><?SourceDTD.Version 1.0?><?ConverterInfo.XSLTName bmc2nlmx2.xsl?><?ConverterInfo.Version 2?><front><journal-meta><journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id><journal-title-group><journal-title>BMC Bioinformatics</journal-title></journal-title-group><issn pub-type="epub">1471-2105</issn><publisher><publisher-name>BioMed Central</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="pmcid">3040525</article-id><article-id pub-id-type="publisher-id">1471-2105-11-S12-S11</article-id><article-id pub-id-type="pmid">21210978</article-id><article-id pub-id-type="doi">10.1186/1471-2105-11-S12-S11</article-id><article-categories><subj-group subj-group-type="heading"><subject>Proceedings</subject></subj-group></article-categories><title-group><article-title>An intuitive Python interface for Bioconductor libraries demonstrates the utility of language translators</article-title></title-group><contrib-group><contrib contrib-type="author" corresp="yes" id="A1"><name><surname>Gautier</surname><given-names>Laurent</given-names></name><xref ref-type="aff" rid="I1">1</xref><email>laurent@cbs.dtu.dk</email></contrib></contrib-group><aff id="I1"><label>1</label>DMAC, Centre for Biological Sequence Analysis, Department of Systems Biology, Technical University of Denmark, Matematiktorvet, 2100 Lyngby, Denmark</aff><pub-date pub-type="collection"><year>2010</year></pub-date><pub-date pub-type="epub"><day>21</day><month>12</month><year>2010</year></pub-date><volume>11</volume><issue>Suppl 12</issue><supplement><named-content content-type="supplement-title">Proceedings of the 11th Annual Bioinformatics Open Source Conference (BOSC) 2010</named-content><named-content content-type="supplement-editor">Kam D Dahlquist</named-content><ext-link ext-link-type="uri" xlink:href="http://www.biomedcentral.com/content/pdf/1471-2105-11-S12-info.pdf">http://www.biomedcentral.com/content/pdf/1471-2105-11-S12-info.pdf</ext-link></supplement><fpage>S11</fpage><lpage>S11</lpage><permissions><copyright-statement>Copyright &#x000a9;2010 Gautier; licensee BioMed Central Ltd.</copyright-statement><copyright-year>2010</copyright-year><copyright-holder>Gautier; licensee BioMed Central Ltd.</copyright-holder><license license-type="open-access" xlink:href="http://creativecommons.org/licenses/by/2.0"><license-p>This is an open access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/2.0">http://creativecommons.org/licenses/by/2.0</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p></license></permissions><self-uri xlink:href="http://www.biomedcentral.com/1471-2105/11/S12/S11"/><abstract><sec><title>Background</title><p>Computer languages can be domain-related, and in the case of multidisciplinary projects, knowledge of several languages will be needed in order to quickly implements ideas. Moreover, each computer language has relative strong points, making some languages better suited than others for a given task to be implemented. The Bioconductor project, based on the R language, has become a reference for the numerical processing and statistical analysis of data coming from high-throughput biological assays, providing a rich selection of methods and algorithms to the research community. At the same time, Python has matured as a rich and reliable language for the agile development of prototypes or final implementations, as well as for handling large data sets.</p></sec><sec><title>Results</title><p>The data structures and functions from Bioconductor can be exposed to Python as a regular library. This allows a fully transparent and native use of Bioconductor from Python, without one having to know the R language and with only a small community of <italic>translators</italic> required to know both. To demonstrate this, we have implemented such Python representations for key infrastructure packages in Bioconductor, letting a Python programmer handle annotation data, microarray data, and next-generation sequencing data.</p></sec><sec><title>Conclusions</title><p>Bioconductor is now not solely reserved to R users. Building a Python application using Bioconductor functionality can be done just like if Bioconductor was a Python package. Moreover, similar principles can be applied to other languages and libraries. Our Python package is available at: <ext-link ext-link-type="uri" xlink:href="http://pypi.python.org/pypi/rpy2-bioconductor-extensions/">http://pypi.python.org/pypi/rpy2-bioconductor-extensions/</ext-link></p></sec></abstract><conference><conf-date>9&#x02013;10 July 2010</conf-date><conf-name>The 11th Annual Bioinformatics Open Source Conference (BOSC) 2010</conf-name><conf-loc>Boston, MA, USA</conf-loc></conference></article-meta></front><body><sec><title>Background</title><p>The Bioconductor project [<xref ref-type="bibr" rid="B1">1</xref>], based on the R language [<xref ref-type="bibr" rid="B2">2</xref>], has become a reference for the numerical processing and statistical analysis of data coming from high-throughput biological assays. Starting with microarray data, it became an integrated suite of data structures and functions to perform tasks ranging from reading raw data files to processing algorithms and to data analysis. The project soon expanded to data analysis in bioinformatics at large and to other assays, providing a rich selection of methods and algorithms to the research community.</p><p>At the same time, the Python language [<xref ref-type="bibr" rid="B3">3</xref>] has matured as a dependable platform for prototype development and data handling. Python is used by many organizations in need of processing or analyzing large volumes of data (Google, NASA, CERN, ILM). Python is a very accessible language and is used in introductory courses to programming for non-computer scientists [<xref ref-type="bibr" rid="B4">4</xref>,<xref ref-type="bibr" rid="B5">5</xref>]. It is also used by professional programmers in need of increased productivity [<xref ref-type="bibr" rid="B6">6</xref>] and agile prototyping.</p><p>In the context of bioinformatics, the Biopython project [<xref ref-type="bibr" rid="B7">7</xref>] was one of the first Python libraries for bioinformatics, and while a few utilities offered by the Bioconductor project were ported to it, both projects grew independently. A collection of other bioinformatics-related Python libraries has also appeared during the last few years: PyCogent [<xref ref-type="bibr" rid="B8">8</xref>], pygr [<xref ref-type="bibr" rid="B9">9</xref>], and bx-python [<xref ref-type="bibr" rid="B10">10</xref>], to name a few.</p><p>We choose the R/Bioconductor-Python duo in the context of bioinformatics to demonstrate how bridging software libraries in different languages can be performed. There exists other bioinformatics libraries in other languages [<xref ref-type="bibr" rid="B11">11</xref>-<xref ref-type="bibr" rid="B14">14</xref>] with which similar principles could be applied, given the relevant tools for bridging the different languages.</p></sec><sec><title>Results and discussion</title><sec><title>Communities and translation</title><p>Whenever a project spans across several communities, the issue of language arises. Bioinformatics is an example of that: being at the interface between biology, computer science, information technology, and statistics, it requires translating terms when experts in the different fields communicate. Here we are focusing on computer languages but the very same principles apply to disciplines. The analogy is even more appropriate when the practitioners of the different disciplines favor one computer language over another one.</p><p>Having a bilingual community is a good way to make cross-language barriers fall, but it has the substantial drawback of being relatively difficult and expensive to achieve. When hiring technical specialists, finding experts in a field can be a difficult task, let alone experts in two fields. Moreover, requiring a bilingual community to operate could cause insidious problems: the imperfect mastery of at least one of the two computer languages can help create issues and keep them unnoticed.</p><p>A smaller community of bilingual individuals, we shall call <italic>translators</italic> or <italic>interpreters,</italic> is able to bridge two larger communities and is easier to obtain than a bilingual community even when setting high standards of fluency for both languages. <italic>Translators</italic> can be in charge of exposing written blocks in one language, which are here Bioconductor data structures and functions written in R, into meaningful blocks in another language, here Python. The result is an interface layer that can be used without knowing much of the original language in which the libraries were developed.</p><p>The software package presented here demonstrates that a translation layer can provide Python developers access to the Bioconductor project, and allow them to develop applications without knowing R.</p><sec><title>Exposing Bioconductor/R structures as native Python structures</title><p>The role of <italic>translators/interpreters</italic> can be restricted to wrapping Bioconductor libraries as Python classes. Here we propose to expose Bioconductor to a Python user, and we rely on the Python-to-R bridge <italic>rpy2</italic>[<xref ref-type="bibr" rid="B15">15</xref>]. This bridge embeds an R interpreter into a Python process and allows seamless access to R objects and functions. This bridge removes the need to deal with the technical issues related to accessing R from Python and lets us focus on presenting Bioconductor libraries to Python programmers.</p><p>In essence, Bioconductor packages contain functions, data structure definitions (classes), and data objects (instances). The task of <italic>translators</italic> is to represent these in Python. This can be done manually, or semi-automatically when relying on the meta-programming tools found in the <italic>rpy2</italic> package (See Figure <xref ref-type="fig" rid="F1">1</xref>). Functions usually do not need much work as they are already automatically exposed by <italic>rpy2.</italic></p><fig id="F1" position="float"><label>Figure 1</label><caption><p><bold>Implementing a Bioconductor class in Python</bold>. Implementing a Bioconductor class can be performed by either declaring all class components explicitly (right), or by relying on meta-programming utilities found in the <italic>rpy2</italic> package (left). Meta-programming helps reduce the amount of boilerplate code by automating part of the translation work.</p></caption><graphic xlink:href="1471-2105-11-S12-S11-1"/></fig><p>The object system in Python is fairly unified, despite the remaining existence of <italic>old</italic> and <italic>new</italic> objects in the Python 2.x series, and is very much central to the language. Most, if not all, Python programmers will be familiar with it. In contrast, the Bioconductor project makes extensive use of the S4 class system for R, a system that remains less known to many R users. The S4 system is related to the one of Common Lisp Object System (CLOS) [<xref ref-type="bibr" rid="B16">16</xref>], and offers multiple dispatch for methods. The S4 system is only present in a limited number of languages (beside CLOS, Clojure&#x02019;s <italic>multimethods</italic> can be mentioned [<xref ref-type="bibr" rid="B17">17</xref>]), and is not available in Python. In this context, the difference in object-oriented programming paradigms have to be resolved by <italic>translators/interpreters.</italic></p><p>Rpy2 exposes classes and methods from Bioconductor are exposed in such a way that differences in programming languages are alleviated. The resulting overall structure matches the canons of Python programming, which Python programmers refer to as <italic>being Pythonic.</italic> The translation proposed creates Python classes corresponding to the Bioconductor classes, and creates Python methods for the relevant S4 methods. The class and method names are kept across the translation, with minor exceptions for methods. Suffixes are added to the method name when S4 multiple dispatch results in naming conflicts on the Python side, and in that case, the type of the arguments in the signature are added to the method names. For example, the <italic>biostrings</italic> class <italic>PairwiseAlignedXStringSet</italic> has three static methods <italic>fromXString_XString(), fromCharacter_Character(), fromCharacter_missing()</italic> to represent the three corresponding constructors of <italic>PairwiseAlignedXStringSet</italic> in Bioconductor. This approach helps keeping a high ressemblance between Python and Bioconductor for the functionalities translated.</p><p>Bioconductor packages can define numerous classes, so it is important that the task of exposing them to Python programmers remains as simple and as short as possible. The Bioconductor package <italic>Biostrings</italic> alone contains close to 40 classes exposed to Python, as illustrated Figure <xref ref-type="fig" rid="F2">2</xref>, while the code base for the translation remains of relatively modest size: <italic>Biostrings</italic> is exposed in less than 600 lines of code, so less than 15 lines of Python code per class exposed on average. In our implementation Python classes are essentially wrappers for R methods of Bioconductor classes, limiting the need for extensive testing.</p><fig id="F2" position="float"><label>Figure 2</label><caption><p><bold>Class diagram for the translation of <italic>Biostrings</italic></bold>. Class from the Bioconductor package <italic>Biostrings</italic> are exposed to Python as native classes. Parent-child relationships are represented by arrows.</p></caption><graphic xlink:href="1471-2105-11-S12-S11-2"/></fig><p>In addition to the above, the task of the <italic>translators/interpreters</italic> can go beyond exposing the classes. Translating idioms specific to one language into the other language will increase the quality of the translation (for example Python has iterators, not available by default in R and not used in Bioconductor). <italic>Translators</italic> can also present data structures a different way, and build a new API from the existing Bioconductor libraries. This is of interest in the context of different communities with different views on data structures and methods, as one can quickly rewrap the existing libraries. This can also be helpful for hiding sophisticated options and simplifying the interface, or wrapping sequences of function calls.</p><p>The implementation presented here covers several Bioconductor infrastructure packages, and is sufficient to handle annotation data, genome sequences, microarray data, and next-generation sequencing.</p><p><bold>annotationdbi:</bold> infrastructure for handling biological annotations.</p><p><bold>biobase:</bold> infrastructure for handling data from high-throughput assays.</p><p><bold>biostrings:</bold> infrastructure for handling biological strings (DNA, RNA, protein sequences)</p><p><bold>bsgenome:</bold> infrastructure for handling genome sequences</p><p><bold>edger:</bold> differential digital expression data</p><p><bold>geoquery:</bold> query data resources from the Gene Expression Omnibus (GEO) repository.</p><p><bold>ggbase:</bold> infrastructure for genetics of gene expression</p><p><bold>ggtools:</bold> software and data for genetics of gene expression</p><p><bold>goseq:</bold> Gene Ontology analysis for RNAseq</p><p><bold>gseabase:</bold> infrastructure for Gene Set Enrichment Analysis (GSEA) types of methods</p><p><bold>iranges:</bold> infrastructure for handling interval data</p><p><bold>shortread:</bold> infrastructure for handling datasets of short reads</p></sec></sec><sec><title>Case-study: providing a web-based interface to <italic>edgeR</italic></title><p>The <italic>egdeR</italic> method [<xref ref-type="bibr" rid="B18">18</xref>] is a popular statistical method for measuring differential abundance in RNA molecule when the measurement technology is based on counts. It is useful for SAGE and RNAseq data. Having the method easily accessible to a community outside the regular Bioconductor user-base expands its reach to the scientific community. In this scenario a simple web application is considered, and the application is written in Python. One strong advantage of Python over R is the presence of many industry-grade solutions for developing web applications, and we choose to demonstrate how to build such a application with <italic>edgeR.</italic></p><sec><title>Reproducing R code</title><p>The Bioconductor/R <italic>edgeR</italic> library is exposed to Python in the module <italic>bioc. edger,</italic> and following the documentation written for R users is straightforward (See Figure <xref ref-type="fig" rid="F3">3</xref>). As outlined earlier, classes and methods present in the Bioconductor package are represented by matching Python classes and methods, as the <italic>translator/interpreter</italic> focused on keeping a high resemblance between R and Python code.</p><fig id="F3" position="float"><label>Figure 3</label><caption><p><bold>Case study: <italic>edgeR</italic> with Python</bold>. The Python code (left) differs from the R code (right) mostly in the top part, where the Python code is using explicit import procedures.</p></caption><graphic xlink:href="1471-2105-11-S12-S11-3"/></fig></sec><sec><title>Building a prototype web server</title><p>The code used to perform an <italic>edgeR</italic> analysis can be wrapped by the Python developer into a Python function, and building a web application that calls this function is trivial (See Figure <xref ref-type="fig" rid="F4">4</xref>).</p><fig id="F4" position="float"><label>Figure 4</label><caption><p><bold>A full webserver for <italic>edger</italic></bold>. In this scenario Python developers have to develop quickly a prototype website letting users upload a CSV file of gene counts and obtain the table of top differentially counted genes. The main application is minimal (left), relying on three helper functions derived from the earlier example with running <italic>edgeR</italic> (right). Rendering the result table is not detailed in order to keep the example concise.</p></caption><graphic xlink:href="1471-2105-11-S12-S11-4"/></fig><p>A fully functioning self-sufficient prototype, including a web-server, a web-form to upload data, data processing, computation of results from the data uploaded, and an answer returned to a client web browser, can be implemented in less than 100 lines of code.</p><p>Having the web server implemented in Python is deemed better because Python has a strong track record of agile web frameworks, the language possesses better error handling mechanisms, and it allows a decoupling of the implementation of data analysis (in R) from the implementation of the application. This separation is important since it allows a programmer specialized in the development of web applications to utilize code developed in R/Bioconductor by data analysts. The translation layer ensures that the code in Bioconductor is exposed in such a way that it can be integrated into the application while retaining all the benefits of the host language.</p><p>This example emphasizes the ease with which applications can be built, and relies on a minimal web development framework. There exist more comprehensive and more complex frameworks, such as Django [<xref ref-type="bibr" rid="B19">19</xref>] and Plone [<xref ref-type="bibr" rid="B20">20</xref>]. Similar implementations have been performed with them. In these cases the development of applications requires highly specialized skills in the corresponding frameworks. In a context where there is specialization of people because of increasingly complex domain-specific knowledge, the availability of a translation layer such as the one proposed is crucial: data analysts can therefore focus on developing algorithms while application developers can focus on the application.</p></sec></sec></sec><sec><title>Conclusions</title><p>A relatively small community of people fluent in two languages and disciplines can expose data structure definitions and functions from libraries in one language as code directly usable by practitioners of the other language. We demonstrate here how this can be achieved by creating a bridge from the Bioconductor project, a popular set of R libraries for the analysis of bioinformatics data, to the Python language. Work that requires extensive knowledge of both languages can be restricted to a small community of <italic>translators/interpreters,</italic> and their code be used by Python programmers without the knowledge of R or Bioconductor. The implementation presented here shows that the amount of translation work can be minimal, yet enable the development of Python applications using Bioconductor easily. Our implementation covers key infrastructure packages in the Bioconductor project and can constitute a basis for extending this to more packages in Bioconductor.</p><p>As an example we demonstrated how a complete web application computing differential expression for digital gene expression can be implemented.</p></sec><sec><title>List of abbreviations</title><p><bold>CERN:</bold> Conseil Europ&#x000e9;en pour la Recherche Nucl&#x000e9;aire; <bold>CLOS:</bold> Common Lisp Object System; <bold>DNA:</bold> Desoxyribonucleic Acid; <bold>GEO:</bold> Gene Expression Omnibus; <bold>GSEA:</bold> Gene Set Enrichment Analysis; <bold>ILM:</bold> Industrial Light and Magic; <bold>NASA:</bold> National Aeronautics and Space Administration; <bold>RNA:</bold> Ribonucleic Acid; <bold>RNAseq:</bold> Whole Transcriptome Shotgun Sequencing; <bold>SAGE:</bold> Serial Analysis of Gene Expression</p></sec><sec><title>Competing interests</title><p>The author declares he has no competing interests</p></sec><sec sec-type="methods"><title>Methods</title><sec><title>Software and operating systems</title><sec><title>R/ Bioconductor</title><p>The principles detailed here were applied to Bioconductor Release 2.6 (April 2010). Bioconductor packages evolve quickly and new versions do not always maintain backward compatibility. Minor adaption might be necessary in order to run what is presented here with other releases. The Bioconductor release 2.6 requires R-2.11, available on the project&#x02019;s website [<xref ref-type="bibr" rid="B21">21</xref>].</p></sec><sec><title>Python and libraries</title><p>Python 2.6.4 was mainly used for development. Other version in the 2.6 series will work. Python is available with most Linux distribution, and is shipped with OS X Leopard and Snow Leopard (version 2.5 and 2.6 respectively).</p><p>A development snapshot of the <italic>rpy2</italic>[<xref ref-type="bibr" rid="B15">15</xref>] package (2.2-dev) was used in this work. Minor adaptations will be required for it to work with the current rpy2 release 2.1.</p><p>The lightweight web-framework <italic>bottle</italic>[<xref ref-type="bibr" rid="B22">22</xref>] was used to demonstrate the implementation of a web-based interface.</p></sec><sec><title>Operating system</title><p>The solution was developed and tested under both Ubuntu Linux 10.04 and 10.10 [<xref ref-type="bibr" rid="B23">23</xref>] and Apple OS X Leopard.</p></sec></sec></sec><sec><title>Authors contributions</title><p>LG designed and implemented the software, and wrote the manuscript.</p></sec></body><back><sec><title>Acknowledgments</title><p>Users, and communities from R, Bioconductor, Python, Biopython. Vincent Davis, Nicolas Rapin, Brad Chapman for discussions. Anonymous reviewers for helping improve the original manuscript. Kam Dahlquist, Editor, for language corrections. LG is funded by an infrastructure grant from the Technical University of Denmark.</p><p>This article has been published as part of <italic>BMC Bioinformatics</italic> Volume 11 Supplement 12, 2010: Proceedings of the 11th Annual Bioinformatics Open Source Conference (BOSC) 2010. The full contents of the supplement are available online at <ext-link ext-link-type="uri" xlink:href="http://www.biomedcentral.com/1471-2105/11?issue=S12">http://www.biomedcentral.com/1471-2105/11?issue=S12</ext-link>.</p></sec><ref-list><ref id="B1"><mixed-citation publication-type="journal"><name><surname>Gentleman</surname><given-names>RC</given-names></name><name><surname>Carey</surname><given-names>VJ</given-names></name><name><surname>Bates</surname><given-names>DM</given-names></name><etal/><article-title>Bioconductor: Open software development for computational biology and bioinformatics</article-title><source>Genome Biology</source><year>2004</year><volume>5</volume><fpage>R80</fpage><pub-id pub-id-type="doi">10.1186/gb-2004-5-10-r80</pub-id><pub-id pub-id-type="pmid">15461798</pub-id></mixed-citation></ref><ref id="B2"><mixed-citation publication-type="book"><collab>R Development Core Team</collab><article-title>R: A Language and Environment for Statistical Computing</article-title><source>R Foundation for Statistical Computing</source><year>2010</year><publisher-name>Vienna, Austria</publisher-name><ext-link ext-link-type="uri" xlink:href="http://www.R-project.org">http://www.R-project.org</ext-link></mixed-citation></ref><ref id="B3"><mixed-citation publication-type="other"><article-title>Python</article-title><ext-link ext-link-type="uri" xlink:href="http://www.python.org">http://www.python.org</ext-link></mixed-citation></ref><ref id="B4"><mixed-citation publication-type="other"><article-title>A Gentle Introduction to Programming Using Python</article-title><ext-link ext-link-type="uri" xlink:href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-189-a-gentle-introduction-to-programming-using-python-january-iap-2010/">http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/ 6-189-a-gentle-introduction-to-programming-using-python-january-iap-2010/</ext-link></mixed-citation></ref><ref id="B5"><mixed-citation publication-type="other"><article-title>Introduction to Programming using Python</article-title><ext-link ext-link-type="uri" xlink:href="http://www.pasteur.fr/formation/infobio/python/">http://www.pasteur.fr/formation/infobio/python/</ext-link></mixed-citation></ref><ref id="B6"><mixed-citation publication-type="journal"><name><surname>Prechelt</surname><given-names>L</given-names></name><article-title>An empirical comparison of seven programming languages</article-title><source>Computer</source><year>2002</year><volume>33</volume></mixed-citation></ref><ref id="B7"><mixed-citation publication-type="journal"><name><surname>Cock</surname><given-names>PJ</given-names></name><name><surname>Antao</surname><given-names>T</given-names></name><name><surname>Chang</surname><given-names>JT</given-names></name><etal/><article-title>Biopython: freely available Python tools for computational molecular biology and bioinformatics</article-title><source>Bioinformatics</source><year>2009</year><volume>25</volume><issue>11</issue><fpage>1422</fpage><lpage>1423</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/btp163</pub-id><pub-id pub-id-type="pmid">19304878</pub-id></mixed-citation></ref><ref id="B8"><mixed-citation publication-type="journal"><name><surname>Knight</surname><given-names>R</given-names></name><name><surname>Maxwell</surname><given-names>P</given-names></name><name><surname>Birmingham</surname><given-names>A</given-names></name><etal/><article-title>PyCogent: a toolkit for making sense from sequence</article-title><source>Genome Biol</source><year>2007</year><volume>8</volume><fpage>R171</fpage><pub-id pub-id-type="doi">10.1186/gb-2007-8-8-r171</pub-id><pub-id pub-id-type="pmid">17708774</pub-id></mixed-citation></ref><ref id="B9"><mixed-citation publication-type="other"><article-title>pygr - Scalabable bioinformatics interfaces in Python</article-title><ext-link ext-link-type="uri" xlink:href="http://code.google.com/p/pygr/">http://code.google.com/p/pygr/</ext-link></mixed-citation></ref><ref id="B10"><mixed-citation publication-type="other"><article-title>bx-python</article-title><ext-link ext-link-type="uri" xlink:href="http://bitbucket.org/jamestaylor/bx-python/overview">http://bitbucket.org/jamestaylor/bx-python/overview</ext-link></mixed-citation></ref><ref id="B11"><mixed-citation publication-type="journal"><name><surname>Stajich</surname><given-names>JE</given-names></name><name><surname>Block</surname><given-names>D</given-names></name><name><surname>K</surname><given-names>KB</given-names></name><etal/><article-title>The Bioperl toolkit: Perl modules for the life sciences</article-title><source>Genome Res</source><year>2002</year><volume>12</volume><issue>10</issue><fpage>1611</fpage><lpage>1618</lpage><pub-id pub-id-type="doi">10.1101/gr.361602</pub-id><pub-id pub-id-type="pmid">12368254</pub-id></mixed-citation></ref><ref id="B12"><mixed-citation publication-type="other"><article-title>BioRuby - Open source bioinformatics library for Ruby</article-title><ext-link ext-link-type="uri" xlink:href="http://bioruby.org">http://bioruby.org</ext-link></mixed-citation></ref><ref id="B13"><mixed-citation publication-type="other"><name><surname>Holland</surname><given-names>RCG</given-names></name><name><surname>Down</surname><given-names>T</given-names></name><name><surname>Pocock</surname><given-names>M</given-names></name><etal/><article-title>BioJava: an Open-Source Framework for Bioinformatics</article-title><source>Bioinformatics</source><year>2008</year><pub-id pub-id-type="pmid">18689808</pub-id></mixed-citation></ref><ref id="B14"><mixed-citation publication-type="other"><name><surname>McKenna</surname><given-names>A</given-names></name><name><surname>Hanna</surname><given-names>M</given-names></name><name><surname>Banks</surname><given-names>E</given-names></name><etal/><article-title>The Genome Analysis Toolkit: A MapReduce framework for analyzing next-generation DNA sequencing data</article-title><source>Genome Research</source><comment> in press </comment><pub-id pub-id-type="pmid">20644199</pub-id></mixed-citation></ref><ref id="B15"><mixed-citation publication-type="other"><article-title>rpy2</article-title><ext-link ext-link-type="uri" xlink:href="http://rpy2.sourceforge.net">http://rpy2.sourceforge.net</ext-link></mixed-citation></ref><ref id="B16"><mixed-citation publication-type="journal"><name><surname>Bobrow</surname><given-names>DG</given-names></name><name><surname>Kahn</surname><given-names>K</given-names></name><name><surname>Kiczales</surname><given-names>G</given-names></name><name><surname>Masinter</surname><given-names>L</given-names></name><name><surname>Stefik</surname><given-names>M</given-names></name><name><surname>Zdybel</surname><given-names>F</given-names></name><article-title>CommonLoops: merging Lisp and object-oriented programming</article-title><source>SIGPLAN Not</source><year>1986</year><volume>21</volume><issue>11</issue><fpage>17</fpage><lpage>29</lpage><pub-id pub-id-type="doi">10.1145/960112.28700</pub-id></mixed-citation></ref><ref id="B17"><mixed-citation publication-type="other"><article-title>Clojure</article-title><ext-link ext-link-type="uri" xlink:href="http://clojure.org">http://clojure.org</ext-link></mixed-citation></ref><ref id="B18"><mixed-citation publication-type="journal"><name><surname>Robinson</surname><given-names>MD</given-names></name><name><surname>McCarthy</surname><given-names>DJ</given-names></name><name><surname>Smyth</surname><given-names>GK</given-names></name><article-title>edgeR: a Bioconductor package for differential expression analysis of digital gene expression data</article-title><source>Bioinformatics</source><year>2010</year><volume>26</volume><fpage>1</fpage><pub-id pub-id-type="doi">10.1093/bioinformatics/btp616</pub-id><pub-id pub-id-type="pmid">19850757</pub-id></mixed-citation></ref><ref id="B19"><mixed-citation publication-type="other"><article-title>The Web framework for perfectionists with deadlines</article-title><ext-link ext-link-type="uri" xlink:href="http://www.djangoproject.com">http://www.djangoproject.com</ext-link></mixed-citation></ref><ref id="B20"><mixed-citation publication-type="other"><article-title>Plone CMS: Open Source Content Management</article-title><ext-link ext-link-type="uri" xlink:href="http://www.plone.org">http://www.plone.org</ext-link></mixed-citation></ref><ref id="B21"><mixed-citation publication-type="other"><article-title>R project</article-title><ext-link ext-link-type="uri" xlink:href="http://www.r-project.org">http://www.r-project.org</ext-link></mixed-citation></ref><ref id="B22"><mixed-citation publication-type="other"><article-title>Bottle: Python Web Framework</article-title><ext-link ext-link-type="uri" xlink:href="http://www.bottle.paws.de">http://www.bottle.paws.de</ext-link></mixed-citation></ref><ref id="B23"><mixed-citation publication-type="other"><article-title>Ubuntu</article-title><ext-link ext-link-type="uri" xlink:href="http://www.ubuntu.org">http://www.ubuntu.org</ext-link></mixed-citation></ref></ref-list></back></article>