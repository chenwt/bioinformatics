dat.kc = kmeans(t(dat), centers=2)
print(dat.kc)
rm(list=ls())
set.seed(1234)
B = matrix(c(runif(50,min=1,max=5),rep(0,50)), nrow=100, ncol=1)
L = matrix(rep(1,5),rep(-1,5), nrow=1, ncol=10)
E = matrix(rnorm(1000), nrow=100, ncol=10)
dat = B %*% L + E
## K-means clustering
dat.kc = kmeans(t(dat), centers=2)
print(dat.kc)
rm(list=ls())
set.seed(1234)
B = matrix(c(runif(50,min=1,max=5),rep(0,50)), nrow=100, ncol=1)
L = matrix(rep(1,5),rep(-1,5), nrow=1, ncol=10)
E = matrix(rnorm(1000), nrow=100, ncol=10)
dat = B %*% L + E
## K-means clustering
dat.kc = kmeans(t(dat), centers=2)
print(dat.kc)
rm(list=ls())
set.seed(1234)
B = matrix(c(runif(50,min=1,max=5),rep(0,50)), nrow=100, ncol=1)
L = matrix(rep(1,5),rep(-1,5), nrow=1, ncol=10)
E = matrix(rnorm(1000), nrow=100, ncol=10)
dat = B %*% L + E
## K-means clustering
dat.kc = kmeans(t(dat), centers=2)
print(dat.kc)
rm(list=ls())
set.seed(1234)
B = matrix(c(runif(50,min=1,max=5),rep(0,50)), nrow=100, ncol=1)
L = matrix(rep(1,5),rep(-1,5), nrow=1, ncol=10)
E = matrix(rnorm(1000), nrow=100, ncol=10)
dat = B %*% L + E
## K-means clustering
dat.kc = kmeans(t(dat), centers=2)
print(dat.kc)
L
rm(list=ls())
set.seed(1234)
B = matrix(c(runif(50,min=2,max=5),rep(0,50)), nrow=100, ncol=1)
L = matrix(c(rep(1,5),rep(-1,5)), nrow=1, ncol=10)
L
B
rm(list=ls())
set.seed(1234)
B = matrix(c(runif(50,min=2,max=5),rep(0,50)), nrow=100, ncol=1)
L = matrix(c(rep(1,5),rep(-1,5)), nrow=1, ncol=10)
E = matrix(rnorm(1000), nrow=100, ncol=10)
dat = B %*% L + E
## K-means clustering
dat.kc = kmeans(t(dat), centers=2)
print(dat.kc)
## K-means clustering
dat.kc = kmeans(t(dat), centers=2)
print(dat.kc)
print(dat.kc$cluster)
print(dat.kc$cluster)
print(dat.kc)
dat.svd = svd(dat)
dat.svd
plot(dat.svd$d^2 / sum(dat.svd$d^2), main="Percent Variance Explained")
dat.svd = svd(dat)
plot(dat.svd$d^2 / sum(dat.svd$d^2), main="Percent Variance Explained",
ylab="% Variance", xlab="Principal Component")
plot(dat.svd$d^2 / sum(dat.svd$d^2), main="Percent Variance Explained",
ylab="% Variance", xlab="Principal Component", pch=20)
attributes(dat.svd)
dat.svd
summary(dat.svd)
dim(dat$d)
dim(dat.svd$d)
dim(dat.svd$y)
dim(dat.svd$u)
dim(dat.svd$v)
attributes(dat.svd)
dim(u)
attributes(dat.svd)
dim(dat.svd$u)
length(dat.svd$d)
dim(dat.svd$v)
plot(1:10, dat.svd$v[,1])
plot(1:10, dat.svd$v[,2])
plot(1:10, dat.svd$v[,1])
plot(1:10, dat.svd$v[,1], pch=20)
plot(1:10, dat.svd$v[,1], main="Principal Component", pch=20)
ring
dat.dist = dist(dat, method="euclidean")
dat.hc = hclust(dat.dist, method="average")
plot(dat.hc, main = "Cluster Dendrogram",
xlab = "Genes", ylab = "Height")
dat.hc
print(dat.hc)
x = c(89,88,66,59,93,73,82,77,100,67)y = c(28,      27,      24,      23,      29,      25,      29,      25,      30,      23)
x = c(89,88,66,59,93,73,82,77,100,67)
x = c(89,      88,      66,      59,      93,      73,      82,      77,      100,      67)
y = c(28,27,      24,      23,      29,      25,      29,      25,      30,      23)
x = c(89,88,66,59,93,73,82,77,100,67)
x<-c(89,88,66,59,93,73,82,77,100,67)y =
x
x<-c(89,88,66,59,93,73,82,77,100,67)
y = c(28,27,24,23,29,25,29,25,30,23)
x-mean(x)
sum((x-mean(x))*(y-mean(y))
)
sum((x-mean(x))*(y-mean(y))) /
sqrt( sum((x-mean(x))^2*(y-mean(y))^2) )
(x-mean(x))
(x-mean(x))*(y-mean(y))
(x-mean(x))
(y-mean(y))
9.6*1.7
x
sum((x-mean(x))*(y-mean(y))) /
sqrt( sum((x-mean(x))^2)*sum((y-mean(y))^2) )
r
r = sum((x-mean(x))*(y-mean(y))) /
sqrt( sum((x-mean(x))^2)*sum((y-mean(y))^2) )
r
r * sqrt(length(x)-2) / (sqrt(1-r^2))
?rt
1-pt(7.4713,df=length(x)-2)
pt(7.4713,df=length(x)-2)
pt(7.471309,df=length(x)-2)
qt(7.471309,df=length(x)-2)
28-mean(y)
(28-mean(y))^2
mean(y)
mean(x)
(89+88+66+59+93+73+82+77+100+67)/10
gc()
ls()
l = list(a=matrix(1,4,4), b=matrix(2,4,4))
rbindlist(l)
library(data.table)
rbindlist(l)
rbindlist(lapply(dfList, as.data.table))
rbindlist(lapply(l, as.data.table))
library(survey)
?survey
d=1
c=1
rm(d,c)
ls()
c=1
d=1
a=c
a=1343
ls()
rm(a,c)
ls()
devdiff
library(lfa)
library(jackstraw)
gc();
devdiff
jackstraw:::devdiff
source("https://bioconductor.org/biocLite.R")
biocLite("qvalue")
library(qvalue)
?lfda
?lfdr
library(lfa)
lfa:::lreg
af_snp()
af_snp_coefs
af_snp
lfa:::af_snp
jackstraw:::af_snp
lfa:::mcfadden_Rsq_snpaf()
lfa:::mcfadden_Rsq_snpaf
lfa:::mcfadden_Rsq_snp
jackstraw:::mcfadden_Rsq_snp
jackstraw:::efron_Rsq_snp
jackstraw:af_snp_coefs
lfa::af()
lfa::af
lfa::af_snp
lfa::af
jackstraw:::mcfadden_Rsq_snpdev.R()
jackstraw:::mcfadden_Rsq_snpdev
jackstraw:::mcfadden_Rsq_snp
jackstraw:::efron_Rsq_snp
library(bootstrap)
?boott
?qexp
citation()
471208
471208 * .1
10000/471208
library(homals)
install.packages("homals")
library(homals)
4233 â€“ 14184
4233-14184
6*3*15
350+70+300+350+270+50
2300*.2
2300 - 460
1840/3
version
system("ls /Library/Frameworks/R.framework/Versions/")
installed.packages()
head(installed.packages())
.Library
.libPaths
versions
versions <- system("ls /Library/Frameworks/R.framework/Versions/")
versions
system("ls /Library/Frameworks/R.framework/Versions/")
test = system("ls /Library/Frameworks/R.framework/Versions/")
versions <- system("ls /Library/Frameworks/R.framework/Versions/", intern=TRUE)
versions
versions <- system("ls -all /Library/Frameworks/R.framework/Versions/", intern=TRUE)
versions
system("ls -la /Library/Frameworks/R.framework/Versions/")
.Library
path
path <- "/Library/Frameworks/R.framework/Versions/"
versions <- system(pasate("ls",path), intern=TRUE)
path <- "/Library/Frameworks/R.framework/Versions/"
versions <- system(paste("ls",path), intern=TRUE)
versions
system(paste("find",path, "-maxdepth 1 -type l -ls"))
system(paste("find",path, "-maxdepth 1 -type l"))
system(paste("find",path, "-maxdepth 1 -type l -ls"))
system(paste("find",path, "-maxdepth 1 -lname -type l -ls"))
system(paste("find",path, "-maxdepth 1 -lname Current"))
system(paste("find",path, "-maxdepth 1 -lname Current -ls"))
system(paste("find",path, "-maxdepth 1 -type l -ls"))
symlinks <- system(paste("find",path, "-maxdepth 1 -type l -ls"), intern=TRUE)
symlinks
?gerb
?greb
?grep
grep(symlinks, "//")
grep(x=symlinks, ppattern =  "//")
grep(x=symlinks, pattern =  "//")
grep(x=symlinks, pattern= "//")
versions
symlinks
2300*.4
2300*.8
(2300*.8)/2
(2300*.8)/3
(2300*.2)
2300*.2
2011.95
/4
2011.95/4
200000/12
200000/12/4
get.fingerprint
library(fingerprint)
?fingerprint
?get.fingerprint
library(rcdk)
library(rpubchem)
library(RxnSim)
library(corpcor)
?get.fingerprint
rm(list=ls())
setwd("~/Desktop/jaws_extra/")
library(impute)
library(qvalue)
library(jackstraw)
library(jaws)
raw = read.csv("data/NormCORE.csv", header=FALSE, row.names=1)
samples = unique(as.vector(unlist(raw[1,])))
cn = as.vector(unlist(raw[1,]))
raw = raw[-1,]
raw = as.matrix(raw)
mode(raw) = "numeric"
dat.avg = matrix(NA, nrow=111, ncol=length(samples))
colnames(dat.avg) = samples
rownames(dat.avg) = rownames(raw)
for(i in 1:length(samples)) {
id = cn %in% samples[i]
dat.avg[,i] = apply(raw[,id], 1, mean)
}
dat = t(scale(t(dat.avg), scale=FALSE, center=TRUE))
svd.obj = svd(dat)
pve = svd.obj$d^2/sum(svd.obj$d^2)
pdf("figure/scree_original.pdf", 8, 6)
plot(pve, col="black", pch=20, ylab="Proportion of Variance Explained", xlab="Principal Component", main="Proportion of Variance Explained by PCs") # 6 sig PC?
abline(v=8.5, col="red", lty="dashed")
dev.off()
rhat = permutationPA(dat)$r
sum(pve[1:rhat])
jaws = jaws.pca(dat, r=rhat, B=100, s=100)
jaws.cov.out = jaws.cov(dat, r=rhat, jaws.pca.obj=jaws)
attributes(jaws)
dim(jaws)
jaws$p
dim(jaws$p)
? jaws.pca
for(i in 1:rhat) {
U = svd.obj$u[,i]
U.order = order(U)
U.sorted = U[U.order]
U.pip = jaws$PIP$u[,i]
U.pip = sign(cor(U,U.pip)) * U.pip
U.pip.sorted = U.pip[U.order]
U.pnv = jaws$PNV$u[,i]
U.pnv = sign(cor(U,U.pnv)) * U.pnv
U.pnv.sorted = U.pnv[U.order]
plot(U.sorted, cex=1, pch=20, col="black", main=paste("PC", i, " Loadings",sep=""), ylab="Magnitude", xlab="Sorted by Magnitude")
points(U.pnv.sorted, cex=.75, pch=20, col="darkgoldenrod3")
points(U.pip.sorted, cex=.75, pch=20, col="olivedrab3")
if(i==1) legend("topleft", pch=c(20,20), bg="white", col=c("black","olivedrab3","darkgoldenrod3"), legend=c("PCA", "Jaws PIP", "Jaws PNV"))
}
par(mfrow=c(4,2), mar=c(4,4,3,2))
for(i in 1:rhat) {
U = svd.obj$u[,i]
U.order = order(U)
U.sorted = U[U.order]
U.pip = jaws$PIP$u[,i]
U.pip = sign(cor(U,U.pip)) * U.pip
U.pip.sorted = U.pip[U.order]
U.pnv = jaws$PNV$u[,i]
U.pnv = sign(cor(U,U.pnv)) * U.pnv
U.pnv.sorted = U.pnv[U.order]
plot(U.sorted, cex=1, pch=20, col="black", main=paste("PC", i, " Loadings",sep=""), ylab="Magnitude", xlab="Sorted by Magnitude")
points(U.pnv.sorted, cex=.75, pch=20, col="darkgoldenrod3")
points(U.pip.sorted, cex=.75, pch=20, col="olivedrab3")
if(i==1) legend("topleft", pch=c(20,20), bg="white", col=c("black","olivedrab3","darkgoldenrod3"), legend=c("PCA", "Jaws PIP", "Jaws PNV"))
}
i=rhat
rhat
plot(U.sorted, cex=1, pch=20, col="black", main=paste("PC", i, " Loadings",sep=""), ylab="Magnitude", xlab="Sorted by Magnitude")
points(U.pnv.sorted, cex=.75, pch=20, col="darkgoldenrod3")
points(U.pip.sorted, cex=.75, pch=20, col="olivedrab3")
par(mfrow=c(1,1))
plot(U.sorted, cex=1, pch=20, col="black", main=paste("PC", i, " Loadings",sep=""), ylab="Magnitude", xlab="Sorted by Magnitude")
points(U.pnv.sorted, cex=.75, pch=20, col="darkgoldenrod3")
points(U.pip.sorted, cex=.75, pch=20, col="olivedrab3")
dim(jaws$PIP$u[,i])
length(jaws$PIP$u[,i])
length(jaws$PNV$u[,i])
i
sign(cor(U,U.pip))
sign(cor(U,U.pnv))
order(c(1,2,3,0,-1))
U = abs(svd.obj$u[,i])
U.order = order(U)
U.sorted = U[U.order]
U.pip = abs(jaws$PIP$u[,i])
U.pip.sorted = U.pip[U.order]
U.pnv = abs(jaws$PNV$u[,i])
U.pnv.sorted = U.pnv[U.order]
plot(U.sorted, cex=1, pch=20, col="black", main=paste("PC", i, " Loadings",sep=""), ylab="Magnitude", xlab="Sorted by Magnitude")
points(U.pnv.sorted, cex=.75, pch=20, col="darkgoldenrod3")
points(U.pip.sorted, cex=.75, pch=20, col="olivedrab3")
attributes(jaws$PNV)
plot(jaws)
attributes(jaws)
?jaws.pca
attributes(jaws$PIP)
plot(jaws$PIP$pr[,8], jaws$PIP$u[,8])
plot(jaws$PIP$pr[order(jaws$PIP$u[,8]),8], jaws$PIP$u[order(jaws$PIP$u[,8]),8])
jaws$PIP$u[,8]
order(jaws$PIP$u[,8])
plot(jaws$PIP$pr[order(jaws$PIP$u[,8]),8], jaws$PIP$u[order(jaws$PIP$u[,8]),8])
order(jaws$PIP$u[,8])
plot(jaws$PIP$pr[order(jaws$PIP$u[,8]),8], jaws$PIP$u[order(jaws$PIP$u[,8]),8])
plot(jaws$PIP$pr[order(jaws$PIP$u[,8]),8], jaws$PIP$u[order(jaws$PIP$u[,8]),8], pch=20)
plot(jaws$PIP$u[order(jaws$PIP$u[,8]),8], jaws$PIP$pr[order(jaws$PIP$u[,8]),8], pch=20)
plot(jaws$PIP$p[order(jaws$PIP$u[,8]),8], jaws$PIP$pr[order(jaws$PIP$u[,8]),8], pch=20)
plot(jaws$PIP$p[order(jaws$PIP$u[,8]),8], jaws$PIP$pr[order(jaws$PIP$u[,8]),8], pch=20)
plot(jaws$PIP$u[order(jaws$PIP$u[,8]),8], jaws$PIP$pr[order(jaws$PIP$u[,8]),8], pch=20)
plot(jaws$PIP$u[order(jaws$PIP$u[,8]),8], jaws$PIP$p[order(jaws$PIP$u[,8]),8], pch=20, xlab="Loadings", ylab="P-value")
jaws5000 = jaws.pca(dat, r=rhat, B=5000, s=100)
jaws1000 = jaws.pca(dat, r=rhat, B=1000, s=100, verbose=FALSE)
dim(dat)
jaws = jaws.pca(dat, r=rhat, B=1000, s=10)
jaws.cov.out = jaws.cov(dat, r=rhat, jaws.pca.obj=jaws)
pdf("figure/shrinkage_loadings_sorted.pdf", 8, 12)
par(mfrow=c(4,2), mar=c(4,4,3,2))
for(i in 1:rhat) {
U = svd.obj$u[,i]
U.order = order(U)
U.sorted = U[U.order]
U.pip = jaws$PIP$u[,i]
U.pip = sign(cor(U,U.pip)) * U.pip
U.pip.sorted = U.pip[U.order]
U.pnv = jaws$PNV$u[,i]
U.pnv = sign(cor(U,U.pnv)) * U.pnv
U.pnv.sorted = U.pnv[U.order]
plot(U.sorted, cex=1, pch=20, col="black", main=paste("PC", i, " Loadings",sep=""), ylab="Magnitude", xlab="Sorted by Magnitude")
points(U.pnv.sorted, cex=.75, pch=20, col="darkgoldenrod3")
points(U.pip.sorted, cex=.75, pch=20, col="olivedrab3")
if(i==1) legend("topleft", pch=c(20,20), bg="white", col=c("black","olivedrab3","darkgoldenrod3"), legend=c("PCA", "Jaws PIP", "Jaws PNV"))
}
dev.off()
jaws.pca
jaws.pca
jaws.pca
jaws = jaws.pca(dat, r=rhat, B=5000, s=10, verbose=TRUE)
jaws = jaws.pca(dat, r=rhat, B=5000, s=10, verbose=FALSE)
jaws.cov.out = jaws.cov(dat, r=rhat, jaws.pca.obj=jaws)
plot(abs(jaws$PIP$u[order(jaws$PIP$u[,8]),8]), abs(jaws$PIP$p[order(jaws$PIP$u[,8]),8]), pch=20, xlab="Loadings", ylab="P-value")
pdf("figure/shrinkage_loadings_sorted.pdf", 8, 12)
par(mfrow=c(4,2), mar=c(4,4,3,2))
for(i in 1:rhat) {
U = svd.obj$u[,i]
U.order = order(U)
U.sorted = U[U.order]
U.pip = jaws$PIP$u[,i]
U.pip = sign(cor(U,U.pip)) * U.pip
U.pip.sorted = U.pip[U.order]
U.pnv = jaws$PNV$u[,i]
U.pnv = sign(cor(U,U.pnv)) * U.pnv
U.pnv.sorted = U.pnv[U.order]
plot(U.sorted, cex=1, pch=20, col="black", main=paste("PC", i, " Loadings",sep=""), ylab="Magnitude", xlab="Sorted by Magnitude")
points(U.pnv.sorted, cex=.75, pch=20, col="darkgoldenrod3")
points(U.pip.sorted, cex=.75, pch=20, col="olivedrab3")
if(i==1) legend("topleft", pch=c(20,20), bg="white", col=c("black","olivedrab3","darkgoldenrod3"), legend=c("PCA", "Jaws PIP", "Jaws PNV"))
}
dev.off()
attributes(jaws$PIP)
? jaws.pca
dim(jaws$PIP$r2)
jaws = jaws.pca(dat, r=rhat, B=10000, s=1, verbose=FALSE)
jaws.cov.out = jaws.cov(dat, r=rhat, jaws.pca.obj=jaws)
pdf("figure/shrinkage_loadings_sorted.pdf", 8, 12)
par(mfrow=c(4,2), mar=c(4,4,3,2))
for(i in 1:rhat) {
U = svd.obj$u[,i]
U.order = order(U)
U.sorted = U[U.order]
U.pip = jaws$PIP$u[,i]
U.pip = sign(cor(U,U.pip)) * U.pip
U.pip.sorted = U.pip[U.order]
U.pnv = jaws$PNV$u[,i]
U.pnv = sign(cor(U,U.pnv)) * U.pnv
U.pnv.sorted = U.pnv[U.order]
plot(U.sorted, cex=1, pch=20, col="black", main=paste("PC", i, " Loadings",sep=""), ylab="Magnitude", xlab="Sorted by Magnitude")
points(U.pnv.sorted, cex=.75, pch=20, col="darkgoldenrod3")
points(U.pip.sorted, cex=.75, pch=20, col="olivedrab3")
if(i==1) legend("topleft", pch=c(20,20), bg="white", col=c("black","olivedrab3","darkgoldenrod3"), legend=c("PCA", "Jaws PIP", "Jaws PNV"))
}
dev.off()
plot(abs(jaws$PIP$u[order(jaws$PIP$u[,8]),8]), abs(jaws$PIP$p[order(jaws$PIP$u[,8]),8]), pch=20, xlab="Loadings", ylab="P-value")
r
rhat
i=8
p8 = jackstraw.PCA(dat, r1=i, r=rhat, s=1000, B=10, verbose=verbose)
p8 = jackstraw.PCA(dat, r1=i, r=rhat, s=1000, B=10)
p8 = jackstraw.PCA(dat, r1=i, r=rhat, s=10, B=1000)
attributes(p8)
plot(p8$obs.stat[order(svd.obj$u[,8]),8], svd.obj$u[order(svd.obj$u[,8]),8], pch=20, xlab="Loadings", ylab="P-value")
length(p8$obs.stat)
plot(p8$obs.stat[order(svd.obj$u[,8])], svd.obj$u[order(svd.obj$u[,8]),8], pch=20, xlab="Loadings", ylab="P-value")
plot(p8$obs.stat[order(svd.obj$u[,8])], svd.obj$u[order(svd.obj$u[,8]),8], pch=20)
jackstraw.PCA
FSTAT
jackstraw::FSTAT
jackstraw:::FSTAT
require(XLConnect)
setwd("~/ContentMine")
wb <- loadWorkbook("RNASeq_Tools.xlsx")
getSheets(wb)
lst = readWorksheet(wb, sheet = getSheets(wb)[-1])
lst
names(lst)
lst[[1]]
getSheets(wb)[2]
i = getSheets(wb)[2]
i
lst[[i]]
i
setwd("~/ContentMine/SoftwareList")
require(XLConnect)
wb <- loadWorkbook("RNASeq_Tools.xlsx")
lst = readWorksheet(wb, sheet = getSheets(wb)[-1])
i
gsub(" ","",i)
setwd("~/ContentMine/SoftwareList")
require(XLConnect)
wb <- loadWorkbook("RNASeq_Tools.xlsx")
lst = readWorksheet(wb, sheet = getSheets(wb)[-1])
?write.csv
for(i in getSheets(wb)[-1]) {
fname = gsub(" ","",i)
write.csv(lst[[i]], row.names=FALSE, col.names=FALSE, file=paste0("csv/",fname,".csv"))
}
warnings()
names(lst)
lst[["Alternative Splicing"]]
?readWorksheet
setwd("~/ContentMine/SoftwareList")
require(XLConnect)
wb <- loadWorkbook("RNASeq_Tools.xlsx")
lst = readWorksheet(wb, sheet = getSheets(wb)[-1], startRow=1, header=FALSE)
for(i in getSheets(wb)[-1]) {
fname = gsub(" ","",i)
write.csv(lst[[i]], row.names=FALSE, col.names=FALSE, file=paste0("csv/",fname,".csv"))
}
warnings()
for(i in getSheets(wb)[-1]) {
fname = gsub(" ","",i)
write.csv(lst[[i]], row.names=FALSE, col.names=na, file=paste0("csv/",fname,".csv"))
}
warningsO
warnings()
?write.csv
for(i in getSheets(wb)[-1]) {
fname = gsub(" ","",i)
write.csv(lst[[i]], row.names=FALSE, col.names=NA, file=paste0("csv/",fname,".csv"))
}
warnings()
